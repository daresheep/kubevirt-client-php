<?php
/**
 * V1Volume
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1Volume Class Doc Comment
 *
 * @category Class
 * @description Volume represents a named volume in a vmi.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Volume implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Volume';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cloud_init_config_drive' => '\Swagger\Client\Model\V1CloudInitConfigDriveSource',
        'cloud_init_no_cloud' => '\Swagger\Client\Model\V1CloudInitNoCloudSource',
        'config_map' => '\Swagger\Client\Model\V1ConfigMapVolumeSource',
        'container_disk' => '\Swagger\Client\Model\V1ContainerDiskSource',
        'data_volume' => '\Swagger\Client\Model\V1DataVolumeSource',
        'downward_api' => '\Swagger\Client\Model\V1DownwardAPIVolumeSource',
        'empty_disk' => '\Swagger\Client\Model\V1EmptyDiskSource',
        'ephemeral' => '\Swagger\Client\Model\V1EphemeralVolumeSource',
        'host_disk' => '\Swagger\Client\Model\V1HostDisk',
        'name' => 'string',
        'persistent_volume_claim' => '\Swagger\Client\Model\K8sIoApiCoreV1PersistentVolumeClaimVolumeSource',
        'secret' => '\Swagger\Client\Model\V1SecretVolumeSource',
        'service_account' => '\Swagger\Client\Model\V1ServiceAccountVolumeSource',
        'sysprep' => '\Swagger\Client\Model\V1SysprepSource'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cloud_init_config_drive' => null,
        'cloud_init_no_cloud' => null,
        'config_map' => null,
        'container_disk' => null,
        'data_volume' => null,
        'downward_api' => null,
        'empty_disk' => null,
        'ephemeral' => null,
        'host_disk' => null,
        'name' => null,
        'persistent_volume_claim' => null,
        'secret' => null,
        'service_account' => null,
        'sysprep' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cloud_init_config_drive' => 'cloudInitConfigDrive',
        'cloud_init_no_cloud' => 'cloudInitNoCloud',
        'config_map' => 'configMap',
        'container_disk' => 'containerDisk',
        'data_volume' => 'dataVolume',
        'downward_api' => 'downwardAPI',
        'empty_disk' => 'emptyDisk',
        'ephemeral' => 'ephemeral',
        'host_disk' => 'hostDisk',
        'name' => 'name',
        'persistent_volume_claim' => 'persistentVolumeClaim',
        'secret' => 'secret',
        'service_account' => 'serviceAccount',
        'sysprep' => 'sysprep'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cloud_init_config_drive' => 'setCloudInitConfigDrive',
        'cloud_init_no_cloud' => 'setCloudInitNoCloud',
        'config_map' => 'setConfigMap',
        'container_disk' => 'setContainerDisk',
        'data_volume' => 'setDataVolume',
        'downward_api' => 'setDownwardApi',
        'empty_disk' => 'setEmptyDisk',
        'ephemeral' => 'setEphemeral',
        'host_disk' => 'setHostDisk',
        'name' => 'setName',
        'persistent_volume_claim' => 'setPersistentVolumeClaim',
        'secret' => 'setSecret',
        'service_account' => 'setServiceAccount',
        'sysprep' => 'setSysprep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cloud_init_config_drive' => 'getCloudInitConfigDrive',
        'cloud_init_no_cloud' => 'getCloudInitNoCloud',
        'config_map' => 'getConfigMap',
        'container_disk' => 'getContainerDisk',
        'data_volume' => 'getDataVolume',
        'downward_api' => 'getDownwardApi',
        'empty_disk' => 'getEmptyDisk',
        'ephemeral' => 'getEphemeral',
        'host_disk' => 'getHostDisk',
        'name' => 'getName',
        'persistent_volume_claim' => 'getPersistentVolumeClaim',
        'secret' => 'getSecret',
        'service_account' => 'getServiceAccount',
        'sysprep' => 'getSysprep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cloud_init_config_drive'] = isset($data['cloud_init_config_drive']) ? $data['cloud_init_config_drive'] : null;
        $this->container['cloud_init_no_cloud'] = isset($data['cloud_init_no_cloud']) ? $data['cloud_init_no_cloud'] : null;
        $this->container['config_map'] = isset($data['config_map']) ? $data['config_map'] : null;
        $this->container['container_disk'] = isset($data['container_disk']) ? $data['container_disk'] : null;
        $this->container['data_volume'] = isset($data['data_volume']) ? $data['data_volume'] : null;
        $this->container['downward_api'] = isset($data['downward_api']) ? $data['downward_api'] : null;
        $this->container['empty_disk'] = isset($data['empty_disk']) ? $data['empty_disk'] : null;
        $this->container['ephemeral'] = isset($data['ephemeral']) ? $data['ephemeral'] : null;
        $this->container['host_disk'] = isset($data['host_disk']) ? $data['host_disk'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['persistent_volume_claim'] = isset($data['persistent_volume_claim']) ? $data['persistent_volume_claim'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['service_account'] = isset($data['service_account']) ? $data['service_account'] : null;
        $this->container['sysprep'] = isset($data['sysprep']) ? $data['sysprep'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cloud_init_config_drive
     *
     * @return \Swagger\Client\Model\V1CloudInitConfigDriveSource
     */
    public function getCloudInitConfigDrive()
    {
        return $this->container['cloud_init_config_drive'];
    }

    /**
     * Sets cloud_init_config_drive
     *
     * @param \Swagger\Client\Model\V1CloudInitConfigDriveSource $cloud_init_config_drive CloudInitConfigDrive represents a cloud-init Config Drive user-data source. The Config Drive data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: https://cloudinit.readthedocs.io/en/latest/topics/datasources/configdrive.html
     *
     * @return $this
     */
    public function setCloudInitConfigDrive($cloud_init_config_drive)
    {
        $this->container['cloud_init_config_drive'] = $cloud_init_config_drive;

        return $this;
    }

    /**
     * Gets cloud_init_no_cloud
     *
     * @return \Swagger\Client\Model\V1CloudInitNoCloudSource
     */
    public function getCloudInitNoCloud()
    {
        return $this->container['cloud_init_no_cloud'];
    }

    /**
     * Sets cloud_init_no_cloud
     *
     * @param \Swagger\Client\Model\V1CloudInitNoCloudSource $cloud_init_no_cloud CloudInitNoCloud represents a cloud-init NoCloud user-data source. The NoCloud data will be added as a disk to the vmi. A proper cloud-init installation is required inside the guest. More info: http://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html
     *
     * @return $this
     */
    public function setCloudInitNoCloud($cloud_init_no_cloud)
    {
        $this->container['cloud_init_no_cloud'] = $cloud_init_no_cloud;

        return $this;
    }

    /**
     * Gets config_map
     *
     * @return \Swagger\Client\Model\V1ConfigMapVolumeSource
     */
    public function getConfigMap()
    {
        return $this->container['config_map'];
    }

    /**
     * Sets config_map
     *
     * @param \Swagger\Client\Model\V1ConfigMapVolumeSource $config_map ConfigMapSource represents a reference to a ConfigMap in the same namespace. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/
     *
     * @return $this
     */
    public function setConfigMap($config_map)
    {
        $this->container['config_map'] = $config_map;

        return $this;
    }

    /**
     * Gets container_disk
     *
     * @return \Swagger\Client\Model\V1ContainerDiskSource
     */
    public function getContainerDisk()
    {
        return $this->container['container_disk'];
    }

    /**
     * Sets container_disk
     *
     * @param \Swagger\Client\Model\V1ContainerDiskSource $container_disk ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
     *
     * @return $this
     */
    public function setContainerDisk($container_disk)
    {
        $this->container['container_disk'] = $container_disk;

        return $this;
    }

    /**
     * Gets data_volume
     *
     * @return \Swagger\Client\Model\V1DataVolumeSource
     */
    public function getDataVolume()
    {
        return $this->container['data_volume'];
    }

    /**
     * Sets data_volume
     *
     * @param \Swagger\Client\Model\V1DataVolumeSource $data_volume DataVolume represents the dynamic creation a PVC for this volume as well as the process of populating that PVC with a disk image.
     *
     * @return $this
     */
    public function setDataVolume($data_volume)
    {
        $this->container['data_volume'] = $data_volume;

        return $this;
    }

    /**
     * Gets downward_api
     *
     * @return \Swagger\Client\Model\V1DownwardAPIVolumeSource
     */
    public function getDownwardApi()
    {
        return $this->container['downward_api'];
    }

    /**
     * Sets downward_api
     *
     * @param \Swagger\Client\Model\V1DownwardAPIVolumeSource $downward_api DownwardAPI represents downward API about the pod that should populate this volume
     *
     * @return $this
     */
    public function setDownwardApi($downward_api)
    {
        $this->container['downward_api'] = $downward_api;

        return $this;
    }

    /**
     * Gets empty_disk
     *
     * @return \Swagger\Client\Model\V1EmptyDiskSource
     */
    public function getEmptyDisk()
    {
        return $this->container['empty_disk'];
    }

    /**
     * Sets empty_disk
     *
     * @param \Swagger\Client\Model\V1EmptyDiskSource $empty_disk EmptyDisk represents a temporary disk which shares the vmis lifecycle. More info: https://kubevirt.gitbooks.io/user-guide/disks-and-volumes.html
     *
     * @return $this
     */
    public function setEmptyDisk($empty_disk)
    {
        $this->container['empty_disk'] = $empty_disk;

        return $this;
    }

    /**
     * Gets ephemeral
     *
     * @return \Swagger\Client\Model\V1EphemeralVolumeSource
     */
    public function getEphemeral()
    {
        return $this->container['ephemeral'];
    }

    /**
     * Sets ephemeral
     *
     * @param \Swagger\Client\Model\V1EphemeralVolumeSource $ephemeral Ephemeral is a special volume source that \"wraps\" specified source and provides copy-on-write image on top of it.
     *
     * @return $this
     */
    public function setEphemeral($ephemeral)
    {
        $this->container['ephemeral'] = $ephemeral;

        return $this;
    }

    /**
     * Gets host_disk
     *
     * @return \Swagger\Client\Model\V1HostDisk
     */
    public function getHostDisk()
    {
        return $this->container['host_disk'];
    }

    /**
     * Sets host_disk
     *
     * @param \Swagger\Client\Model\V1HostDisk $host_disk HostDisk represents a disk created on the cluster level
     *
     * @return $this
     */
    public function setHostDisk($host_disk)
    {
        $this->container['host_disk'] = $host_disk;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets persistent_volume_claim
     *
     * @return \Swagger\Client\Model\K8sIoApiCoreV1PersistentVolumeClaimVolumeSource
     */
    public function getPersistentVolumeClaim()
    {
        return $this->container['persistent_volume_claim'];
    }

    /**
     * Sets persistent_volume_claim
     *
     * @param \Swagger\Client\Model\K8sIoApiCoreV1PersistentVolumeClaimVolumeSource $persistent_volume_claim PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. Directly attached to the vmi via qemu. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     *
     * @return $this
     */
    public function setPersistentVolumeClaim($persistent_volume_claim)
    {
        $this->container['persistent_volume_claim'] = $persistent_volume_claim;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return \Swagger\Client\Model\V1SecretVolumeSource
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param \Swagger\Client\Model\V1SecretVolumeSource $secret SecretVolumeSource represents a reference to a secret data in the same namespace. More info: https://kubernetes.io/docs/concepts/configuration/secret/
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets service_account
     *
     * @return \Swagger\Client\Model\V1ServiceAccountVolumeSource
     */
    public function getServiceAccount()
    {
        return $this->container['service_account'];
    }

    /**
     * Sets service_account
     *
     * @param \Swagger\Client\Model\V1ServiceAccountVolumeSource $service_account ServiceAccountVolumeSource represents a reference to a service account. There can only be one volume of this type! More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     *
     * @return $this
     */
    public function setServiceAccount($service_account)
    {
        $this->container['service_account'] = $service_account;

        return $this;
    }

    /**
     * Gets sysprep
     *
     * @return \Swagger\Client\Model\V1SysprepSource
     */
    public function getSysprep()
    {
        return $this->container['sysprep'];
    }

    /**
     * Sets sysprep
     *
     * @param \Swagger\Client\Model\V1SysprepSource $sysprep Represents a Sysprep volume source.
     *
     * @return $this
     */
    public function setSysprep($sysprep)
    {
        $this->container['sysprep'] = $sysprep;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


