<?php
/**
 * V1DomainSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1DomainSpec Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1DomainSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.DomainSpec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chassis' => '\Swagger\Client\Model\V1Chassis',
        'clock' => '\Swagger\Client\Model\V1Clock',
        'cpu' => '\Swagger\Client\Model\V1CPU',
        'devices' => '\Swagger\Client\Model\V1Devices',
        'features' => '\Swagger\Client\Model\V1Features',
        'firmware' => '\Swagger\Client\Model\V1Firmware',
        'io_threads_policy' => 'string',
        'machine' => '\Swagger\Client\Model\V1Machine',
        'memory' => '\Swagger\Client\Model\V1Memory',
        'resources' => '\Swagger\Client\Model\V1ResourceRequirements'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chassis' => null,
        'clock' => null,
        'cpu' => null,
        'devices' => null,
        'features' => null,
        'firmware' => null,
        'io_threads_policy' => null,
        'machine' => null,
        'memory' => null,
        'resources' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chassis' => 'chassis',
        'clock' => 'clock',
        'cpu' => 'cpu',
        'devices' => 'devices',
        'features' => 'features',
        'firmware' => 'firmware',
        'io_threads_policy' => 'ioThreadsPolicy',
        'machine' => 'machine',
        'memory' => 'memory',
        'resources' => 'resources'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chassis' => 'setChassis',
        'clock' => 'setClock',
        'cpu' => 'setCpu',
        'devices' => 'setDevices',
        'features' => 'setFeatures',
        'firmware' => 'setFirmware',
        'io_threads_policy' => 'setIoThreadsPolicy',
        'machine' => 'setMachine',
        'memory' => 'setMemory',
        'resources' => 'setResources'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chassis' => 'getChassis',
        'clock' => 'getClock',
        'cpu' => 'getCpu',
        'devices' => 'getDevices',
        'features' => 'getFeatures',
        'firmware' => 'getFirmware',
        'io_threads_policy' => 'getIoThreadsPolicy',
        'machine' => 'getMachine',
        'memory' => 'getMemory',
        'resources' => 'getResources'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chassis'] = isset($data['chassis']) ? $data['chassis'] : null;
        $this->container['clock'] = isset($data['clock']) ? $data['clock'] : null;
        $this->container['cpu'] = isset($data['cpu']) ? $data['cpu'] : null;
        $this->container['devices'] = isset($data['devices']) ? $data['devices'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['firmware'] = isset($data['firmware']) ? $data['firmware'] : null;
        $this->container['io_threads_policy'] = isset($data['io_threads_policy']) ? $data['io_threads_policy'] : null;
        $this->container['machine'] = isset($data['machine']) ? $data['machine'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['resources'] = isset($data['resources']) ? $data['resources'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['devices'] === null) {
            $invalidProperties[] = "'devices' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chassis
     *
     * @return \Swagger\Client\Model\V1Chassis
     */
    public function getChassis()
    {
        return $this->container['chassis'];
    }

    /**
     * Sets chassis
     *
     * @param \Swagger\Client\Model\V1Chassis $chassis Chassis specifies the chassis info passed to the domain.
     *
     * @return $this
     */
    public function setChassis($chassis)
    {
        $this->container['chassis'] = $chassis;

        return $this;
    }

    /**
     * Gets clock
     *
     * @return \Swagger\Client\Model\V1Clock
     */
    public function getClock()
    {
        return $this->container['clock'];
    }

    /**
     * Sets clock
     *
     * @param \Swagger\Client\Model\V1Clock $clock Clock sets the clock and timers of the vmi.
     *
     * @return $this
     */
    public function setClock($clock)
    {
        $this->container['clock'] = $clock;

        return $this;
    }

    /**
     * Gets cpu
     *
     * @return \Swagger\Client\Model\V1CPU
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param \Swagger\Client\Model\V1CPU $cpu CPU allow specified the detailed CPU topology inside the vmi.
     *
     * @return $this
     */
    public function setCpu($cpu)
    {
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return \Swagger\Client\Model\V1Devices
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param \Swagger\Client\Model\V1Devices $devices Devices allows adding disks, network interfaces, and others
     *
     * @return $this
     */
    public function setDevices($devices)
    {
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\V1Features
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\V1Features $features Features like acpi, apic, hyperv, smm.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets firmware
     *
     * @return \Swagger\Client\Model\V1Firmware
     */
    public function getFirmware()
    {
        return $this->container['firmware'];
    }

    /**
     * Sets firmware
     *
     * @param \Swagger\Client\Model\V1Firmware $firmware Firmware.
     *
     * @return $this
     */
    public function setFirmware($firmware)
    {
        $this->container['firmware'] = $firmware;

        return $this;
    }

    /**
     * Gets io_threads_policy
     *
     * @return string
     */
    public function getIoThreadsPolicy()
    {
        return $this->container['io_threads_policy'];
    }

    /**
     * Sets io_threads_policy
     *
     * @param string $io_threads_policy Controls whether or not disks will share IOThreads. Omitting IOThreadsPolicy disables use of IOThreads. One of: shared, auto
     *
     * @return $this
     */
    public function setIoThreadsPolicy($io_threads_policy)
    {
        $this->container['io_threads_policy'] = $io_threads_policy;

        return $this;
    }

    /**
     * Gets machine
     *
     * @return \Swagger\Client\Model\V1Machine
     */
    public function getMachine()
    {
        return $this->container['machine'];
    }

    /**
     * Sets machine
     *
     * @param \Swagger\Client\Model\V1Machine $machine Machine type.
     *
     * @return $this
     */
    public function setMachine($machine)
    {
        $this->container['machine'] = $machine;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return \Swagger\Client\Model\V1Memory
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param \Swagger\Client\Model\V1Memory $memory Memory allow specifying the VMI memory features.
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return \Swagger\Client\Model\V1ResourceRequirements
     */
    public function getResources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param \Swagger\Client\Model\V1ResourceRequirements $resources Resources describes the Compute Resources required by this vmi.
     *
     * @return $this
     */
    public function setResources($resources)
    {
        $this->container['resources'] = $resources;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


