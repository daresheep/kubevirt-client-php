<?php
/**
 * V1DeveloperConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1DeveloperConfiguration Class Doc Comment
 *
 * @category Class
 * @description DeveloperConfiguration holds developer options
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1DeveloperConfiguration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.DeveloperConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cpu_allocation_ratio' => 'int',
        'feature_gates' => 'string[]',
        'log_verbosity' => '\Swagger\Client\Model\V1LogVerbosity',
        'memory_overcommit' => 'int',
        'node_selectors' => 'map[string,string]',
        'pvc_tolerate_less_space_up_to_percent' => 'int',
        'use_emulation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cpu_allocation_ratio' => 'int32',
        'feature_gates' => null,
        'log_verbosity' => null,
        'memory_overcommit' => 'int32',
        'node_selectors' => null,
        'pvc_tolerate_less_space_up_to_percent' => 'int32',
        'use_emulation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu_allocation_ratio' => 'cpuAllocationRatio',
        'feature_gates' => 'featureGates',
        'log_verbosity' => 'logVerbosity',
        'memory_overcommit' => 'memoryOvercommit',
        'node_selectors' => 'nodeSelectors',
        'pvc_tolerate_less_space_up_to_percent' => 'pvcTolerateLessSpaceUpToPercent',
        'use_emulation' => 'useEmulation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu_allocation_ratio' => 'setCpuAllocationRatio',
        'feature_gates' => 'setFeatureGates',
        'log_verbosity' => 'setLogVerbosity',
        'memory_overcommit' => 'setMemoryOvercommit',
        'node_selectors' => 'setNodeSelectors',
        'pvc_tolerate_less_space_up_to_percent' => 'setPvcTolerateLessSpaceUpToPercent',
        'use_emulation' => 'setUseEmulation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu_allocation_ratio' => 'getCpuAllocationRatio',
        'feature_gates' => 'getFeatureGates',
        'log_verbosity' => 'getLogVerbosity',
        'memory_overcommit' => 'getMemoryOvercommit',
        'node_selectors' => 'getNodeSelectors',
        'pvc_tolerate_less_space_up_to_percent' => 'getPvcTolerateLessSpaceUpToPercent',
        'use_emulation' => 'getUseEmulation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cpu_allocation_ratio'] = isset($data['cpu_allocation_ratio']) ? $data['cpu_allocation_ratio'] : null;
        $this->container['feature_gates'] = isset($data['feature_gates']) ? $data['feature_gates'] : null;
        $this->container['log_verbosity'] = isset($data['log_verbosity']) ? $data['log_verbosity'] : null;
        $this->container['memory_overcommit'] = isset($data['memory_overcommit']) ? $data['memory_overcommit'] : null;
        $this->container['node_selectors'] = isset($data['node_selectors']) ? $data['node_selectors'] : null;
        $this->container['pvc_tolerate_less_space_up_to_percent'] = isset($data['pvc_tolerate_less_space_up_to_percent']) ? $data['pvc_tolerate_less_space_up_to_percent'] : null;
        $this->container['use_emulation'] = isset($data['use_emulation']) ? $data['use_emulation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu_allocation_ratio
     *
     * @return int
     */
    public function getCpuAllocationRatio()
    {
        return $this->container['cpu_allocation_ratio'];
    }

    /**
     * Sets cpu_allocation_ratio
     *
     * @param int $cpu_allocation_ratio cpu_allocation_ratio
     *
     * @return $this
     */
    public function setCpuAllocationRatio($cpu_allocation_ratio)
    {
        $this->container['cpu_allocation_ratio'] = $cpu_allocation_ratio;

        return $this;
    }

    /**
     * Gets feature_gates
     *
     * @return string[]
     */
    public function getFeatureGates()
    {
        return $this->container['feature_gates'];
    }

    /**
     * Sets feature_gates
     *
     * @param string[] $feature_gates feature_gates
     *
     * @return $this
     */
    public function setFeatureGates($feature_gates)
    {
        $this->container['feature_gates'] = $feature_gates;

        return $this;
    }

    /**
     * Gets log_verbosity
     *
     * @return \Swagger\Client\Model\V1LogVerbosity
     */
    public function getLogVerbosity()
    {
        return $this->container['log_verbosity'];
    }

    /**
     * Sets log_verbosity
     *
     * @param \Swagger\Client\Model\V1LogVerbosity $log_verbosity log_verbosity
     *
     * @return $this
     */
    public function setLogVerbosity($log_verbosity)
    {
        $this->container['log_verbosity'] = $log_verbosity;

        return $this;
    }

    /**
     * Gets memory_overcommit
     *
     * @return int
     */
    public function getMemoryOvercommit()
    {
        return $this->container['memory_overcommit'];
    }

    /**
     * Sets memory_overcommit
     *
     * @param int $memory_overcommit memory_overcommit
     *
     * @return $this
     */
    public function setMemoryOvercommit($memory_overcommit)
    {
        $this->container['memory_overcommit'] = $memory_overcommit;

        return $this;
    }

    /**
     * Gets node_selectors
     *
     * @return map[string,string]
     */
    public function getNodeSelectors()
    {
        return $this->container['node_selectors'];
    }

    /**
     * Sets node_selectors
     *
     * @param map[string,string] $node_selectors node_selectors
     *
     * @return $this
     */
    public function setNodeSelectors($node_selectors)
    {
        $this->container['node_selectors'] = $node_selectors;

        return $this;
    }

    /**
     * Gets pvc_tolerate_less_space_up_to_percent
     *
     * @return int
     */
    public function getPvcTolerateLessSpaceUpToPercent()
    {
        return $this->container['pvc_tolerate_less_space_up_to_percent'];
    }

    /**
     * Sets pvc_tolerate_less_space_up_to_percent
     *
     * @param int $pvc_tolerate_less_space_up_to_percent pvc_tolerate_less_space_up_to_percent
     *
     * @return $this
     */
    public function setPvcTolerateLessSpaceUpToPercent($pvc_tolerate_less_space_up_to_percent)
    {
        $this->container['pvc_tolerate_less_space_up_to_percent'] = $pvc_tolerate_less_space_up_to_percent;

        return $this;
    }

    /**
     * Gets use_emulation
     *
     * @return bool
     */
    public function getUseEmulation()
    {
        return $this->container['use_emulation'];
    }

    /**
     * Sets use_emulation
     *
     * @param bool $use_emulation use_emulation
     *
     * @return $this
     */
    public function setUseEmulation($use_emulation)
    {
        $this->container['use_emulation'] = $use_emulation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


