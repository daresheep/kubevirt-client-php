<?php
/**
 * V1Timer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1Timer Class Doc Comment
 *
 * @category Class
 * @description Represents all available timers in a vmi.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Timer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Timer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hpet' => '\Swagger\Client\Model\V1HPETTimer',
        'hyperv' => '\Swagger\Client\Model\V1HypervTimer',
        'kvm' => '\Swagger\Client\Model\V1KVMTimer',
        'pit' => '\Swagger\Client\Model\V1PITTimer',
        'rtc' => '\Swagger\Client\Model\V1RTCTimer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hpet' => null,
        'hyperv' => null,
        'kvm' => null,
        'pit' => null,
        'rtc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hpet' => 'hpet',
        'hyperv' => 'hyperv',
        'kvm' => 'kvm',
        'pit' => 'pit',
        'rtc' => 'rtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hpet' => 'setHpet',
        'hyperv' => 'setHyperv',
        'kvm' => 'setKvm',
        'pit' => 'setPit',
        'rtc' => 'setRtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hpet' => 'getHpet',
        'hyperv' => 'getHyperv',
        'kvm' => 'getKvm',
        'pit' => 'getPit',
        'rtc' => 'getRtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hpet'] = isset($data['hpet']) ? $data['hpet'] : null;
        $this->container['hyperv'] = isset($data['hyperv']) ? $data['hyperv'] : null;
        $this->container['kvm'] = isset($data['kvm']) ? $data['kvm'] : null;
        $this->container['pit'] = isset($data['pit']) ? $data['pit'] : null;
        $this->container['rtc'] = isset($data['rtc']) ? $data['rtc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hpet
     *
     * @return \Swagger\Client\Model\V1HPETTimer
     */
    public function getHpet()
    {
        return $this->container['hpet'];
    }

    /**
     * Sets hpet
     *
     * @param \Swagger\Client\Model\V1HPETTimer $hpet HPET (High Precision Event Timer) - multiple timers with periodic interrupts.
     *
     * @return $this
     */
    public function setHpet($hpet)
    {
        $this->container['hpet'] = $hpet;

        return $this;
    }

    /**
     * Gets hyperv
     *
     * @return \Swagger\Client\Model\V1HypervTimer
     */
    public function getHyperv()
    {
        return $this->container['hyperv'];
    }

    /**
     * Sets hyperv
     *
     * @param \Swagger\Client\Model\V1HypervTimer $hyperv Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.
     *
     * @return $this
     */
    public function setHyperv($hyperv)
    {
        $this->container['hyperv'] = $hyperv;

        return $this;
    }

    /**
     * Gets kvm
     *
     * @return \Swagger\Client\Model\V1KVMTimer
     */
    public function getKvm()
    {
        return $this->container['kvm'];
    }

    /**
     * Sets kvm
     *
     * @param \Swagger\Client\Model\V1KVMTimer $kvm KVM  (KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.
     *
     * @return $this
     */
    public function setKvm($kvm)
    {
        $this->container['kvm'] = $kvm;

        return $this;
    }

    /**
     * Gets pit
     *
     * @return \Swagger\Client\Model\V1PITTimer
     */
    public function getPit()
    {
        return $this->container['pit'];
    }

    /**
     * Sets pit
     *
     * @param \Swagger\Client\Model\V1PITTimer $pit PIT (Programmable Interval Timer) - a timer with periodic interrupts.
     *
     * @return $this
     */
    public function setPit($pit)
    {
        $this->container['pit'] = $pit;

        return $this;
    }

    /**
     * Gets rtc
     *
     * @return \Swagger\Client\Model\V1RTCTimer
     */
    public function getRtc()
    {
        return $this->container['rtc'];
    }

    /**
     * Sets rtc
     *
     * @param \Swagger\Client\Model\V1RTCTimer $rtc RTC (Real Time Clock) - a continuously running timer with periodic interrupts.
     *
     * @return $this
     */
    public function setRtc($rtc)
    {
        $this->container['rtc'] = $rtc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


