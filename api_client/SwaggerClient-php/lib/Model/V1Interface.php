<?php
/**
 * V1Interface
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1Interface Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Interface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boot_order' => 'int',
        'bridge' => '\Swagger\Client\Model\V1InterfaceBridge',
        'dhcp_options' => '\Swagger\Client\Model\V1DHCPOptions',
        'mac_address' => 'string',
        'macvtap' => '\Swagger\Client\Model\V1InterfaceMacvtap',
        'masquerade' => '\Swagger\Client\Model\V1InterfaceMasquerade',
        'model' => 'string',
        'name' => 'string',
        'pci_address' => 'string',
        'ports' => '\Swagger\Client\Model\V1Port[]',
        'slirp' => '\Swagger\Client\Model\V1InterfaceSlirp',
        'sriov' => '\Swagger\Client\Model\V1InterfaceSRIOV',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'boot_order' => 'int32',
        'bridge' => null,
        'dhcp_options' => null,
        'mac_address' => null,
        'macvtap' => null,
        'masquerade' => null,
        'model' => null,
        'name' => null,
        'pci_address' => null,
        'ports' => null,
        'slirp' => null,
        'sriov' => null,
        'tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'boot_order' => 'bootOrder',
        'bridge' => 'bridge',
        'dhcp_options' => 'dhcpOptions',
        'mac_address' => 'macAddress',
        'macvtap' => 'macvtap',
        'masquerade' => 'masquerade',
        'model' => 'model',
        'name' => 'name',
        'pci_address' => 'pciAddress',
        'ports' => 'ports',
        'slirp' => 'slirp',
        'sriov' => 'sriov',
        'tag' => 'tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'boot_order' => 'setBootOrder',
        'bridge' => 'setBridge',
        'dhcp_options' => 'setDhcpOptions',
        'mac_address' => 'setMacAddress',
        'macvtap' => 'setMacvtap',
        'masquerade' => 'setMasquerade',
        'model' => 'setModel',
        'name' => 'setName',
        'pci_address' => 'setPciAddress',
        'ports' => 'setPorts',
        'slirp' => 'setSlirp',
        'sriov' => 'setSriov',
        'tag' => 'setTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'boot_order' => 'getBootOrder',
        'bridge' => 'getBridge',
        'dhcp_options' => 'getDhcpOptions',
        'mac_address' => 'getMacAddress',
        'macvtap' => 'getMacvtap',
        'masquerade' => 'getMasquerade',
        'model' => 'getModel',
        'name' => 'getName',
        'pci_address' => 'getPciAddress',
        'ports' => 'getPorts',
        'slirp' => 'getSlirp',
        'sriov' => 'getSriov',
        'tag' => 'getTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boot_order'] = isset($data['boot_order']) ? $data['boot_order'] : null;
        $this->container['bridge'] = isset($data['bridge']) ? $data['bridge'] : null;
        $this->container['dhcp_options'] = isset($data['dhcp_options']) ? $data['dhcp_options'] : null;
        $this->container['mac_address'] = isset($data['mac_address']) ? $data['mac_address'] : null;
        $this->container['macvtap'] = isset($data['macvtap']) ? $data['macvtap'] : null;
        $this->container['masquerade'] = isset($data['masquerade']) ? $data['masquerade'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pci_address'] = isset($data['pci_address']) ? $data['pci_address'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['slirp'] = isset($data['slirp']) ? $data['slirp'] : null;
        $this->container['sriov'] = isset($data['sriov']) ? $data['sriov'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets boot_order
     *
     * @return int
     */
    public function getBootOrder()
    {
        return $this->container['boot_order'];
    }

    /**
     * Sets boot_order
     *
     * @param int $boot_order BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each interface or disk that has a boot order must have a unique value. Interfaces without a boot order are not tried.
     *
     * @return $this
     */
    public function setBootOrder($boot_order)
    {
        $this->container['boot_order'] = $boot_order;

        return $this;
    }

    /**
     * Gets bridge
     *
     * @return \Swagger\Client\Model\V1InterfaceBridge
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param \Swagger\Client\Model\V1InterfaceBridge $bridge bridge
     *
     * @return $this
     */
    public function setBridge($bridge)
    {
        $this->container['bridge'] = $bridge;

        return $this;
    }

    /**
     * Gets dhcp_options
     *
     * @return \Swagger\Client\Model\V1DHCPOptions
     */
    public function getDhcpOptions()
    {
        return $this->container['dhcp_options'];
    }

    /**
     * Sets dhcp_options
     *
     * @param \Swagger\Client\Model\V1DHCPOptions $dhcp_options If specified the network interface will pass additional DHCP options to the VMI
     *
     * @return $this
     */
    public function setDhcpOptions($dhcp_options)
    {
        $this->container['dhcp_options'] = $dhcp_options;

        return $this;
    }

    /**
     * Gets mac_address
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['mac_address'];
    }

    /**
     * Sets mac_address
     *
     * @param string $mac_address Interface MAC address. For example: de:ad:00:00:be:af or DE-AD-00-00-BE-AF.
     *
     * @return $this
     */
    public function setMacAddress($mac_address)
    {
        $this->container['mac_address'] = $mac_address;

        return $this;
    }

    /**
     * Gets macvtap
     *
     * @return \Swagger\Client\Model\V1InterfaceMacvtap
     */
    public function getMacvtap()
    {
        return $this->container['macvtap'];
    }

    /**
     * Sets macvtap
     *
     * @param \Swagger\Client\Model\V1InterfaceMacvtap $macvtap macvtap
     *
     * @return $this
     */
    public function setMacvtap($macvtap)
    {
        $this->container['macvtap'] = $macvtap;

        return $this;
    }

    /**
     * Gets masquerade
     *
     * @return \Swagger\Client\Model\V1InterfaceMasquerade
     */
    public function getMasquerade()
    {
        return $this->container['masquerade'];
    }

    /**
     * Sets masquerade
     *
     * @param \Swagger\Client\Model\V1InterfaceMasquerade $masquerade masquerade
     *
     * @return $this
     */
    public function setMasquerade($masquerade)
    {
        $this->container['masquerade'] = $masquerade;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Interface model. One of: e1000, e1000e, ne2k_pci, pcnet, rtl8139, virtio. Defaults to virtio.
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Logical name of the interface as well as a reference to the associated networks. Must match the Name of a Network.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pci_address
     *
     * @return string
     */
    public function getPciAddress()
    {
        return $this->container['pci_address'];
    }

    /**
     * Sets pci_address
     *
     * @param string $pci_address If specified, the virtual network interface will be placed on the guests pci address with the specified PCI address. For example: 0000:81:01.10
     *
     * @return $this
     */
    public function setPciAddress($pci_address)
    {
        $this->container['pci_address'] = $pci_address;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Swagger\Client\Model\V1Port[]
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Swagger\Client\Model\V1Port[] $ports List of ports to be forwarded to the virtual machine.
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets slirp
     *
     * @return \Swagger\Client\Model\V1InterfaceSlirp
     */
    public function getSlirp()
    {
        return $this->container['slirp'];
    }

    /**
     * Sets slirp
     *
     * @param \Swagger\Client\Model\V1InterfaceSlirp $slirp slirp
     *
     * @return $this
     */
    public function setSlirp($slirp)
    {
        $this->container['slirp'] = $slirp;

        return $this;
    }

    /**
     * Gets sriov
     *
     * @return \Swagger\Client\Model\V1InterfaceSRIOV
     */
    public function getSriov()
    {
        return $this->container['sriov'];
    }

    /**
     * Sets sriov
     *
     * @param \Swagger\Client\Model\V1InterfaceSRIOV $sriov sriov
     *
     * @return $this
     */
    public function setSriov($sriov)
    {
        $this->container['sriov'] = $sriov;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag If specified, the virtual network interface address and its tag will be provided to the guest via config drive
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


