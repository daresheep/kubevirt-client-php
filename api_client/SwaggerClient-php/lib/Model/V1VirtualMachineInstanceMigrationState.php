<?php
/**
 * V1VirtualMachineInstanceMigrationState
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1VirtualMachineInstanceMigrationState Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1VirtualMachineInstanceMigrationState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.VirtualMachineInstanceMigrationState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'abort_requested' => 'bool',
        'abort_status' => 'string',
        'completed' => 'bool',
        'end_timestamp' => '\Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time',
        'failed' => 'bool',
        'migration_uid' => 'string',
        'mode' => 'string',
        'source_node' => 'string',
        'start_timestamp' => '\Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time',
        'target_direct_migration_node_ports' => 'map[string,int]',
        'target_node' => 'string',
        'target_node_address' => 'string',
        'target_node_domain_detected' => 'bool',
        'target_pod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'abort_requested' => null,
        'abort_status' => null,
        'completed' => null,
        'end_timestamp' => null,
        'failed' => null,
        'migration_uid' => null,
        'mode' => null,
        'source_node' => null,
        'start_timestamp' => null,
        'target_direct_migration_node_ports' => 'int32',
        'target_node' => null,
        'target_node_address' => null,
        'target_node_domain_detected' => null,
        'target_pod' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abort_requested' => 'abortRequested',
        'abort_status' => 'abortStatus',
        'completed' => 'completed',
        'end_timestamp' => 'endTimestamp',
        'failed' => 'failed',
        'migration_uid' => 'migrationUid',
        'mode' => 'mode',
        'source_node' => 'sourceNode',
        'start_timestamp' => 'startTimestamp',
        'target_direct_migration_node_ports' => 'targetDirectMigrationNodePorts',
        'target_node' => 'targetNode',
        'target_node_address' => 'targetNodeAddress',
        'target_node_domain_detected' => 'targetNodeDomainDetected',
        'target_pod' => 'targetPod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abort_requested' => 'setAbortRequested',
        'abort_status' => 'setAbortStatus',
        'completed' => 'setCompleted',
        'end_timestamp' => 'setEndTimestamp',
        'failed' => 'setFailed',
        'migration_uid' => 'setMigrationUid',
        'mode' => 'setMode',
        'source_node' => 'setSourceNode',
        'start_timestamp' => 'setStartTimestamp',
        'target_direct_migration_node_ports' => 'setTargetDirectMigrationNodePorts',
        'target_node' => 'setTargetNode',
        'target_node_address' => 'setTargetNodeAddress',
        'target_node_domain_detected' => 'setTargetNodeDomainDetected',
        'target_pod' => 'setTargetPod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abort_requested' => 'getAbortRequested',
        'abort_status' => 'getAbortStatus',
        'completed' => 'getCompleted',
        'end_timestamp' => 'getEndTimestamp',
        'failed' => 'getFailed',
        'migration_uid' => 'getMigrationUid',
        'mode' => 'getMode',
        'source_node' => 'getSourceNode',
        'start_timestamp' => 'getStartTimestamp',
        'target_direct_migration_node_ports' => 'getTargetDirectMigrationNodePorts',
        'target_node' => 'getTargetNode',
        'target_node_address' => 'getTargetNodeAddress',
        'target_node_domain_detected' => 'getTargetNodeDomainDetected',
        'target_pod' => 'getTargetPod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abort_requested'] = isset($data['abort_requested']) ? $data['abort_requested'] : null;
        $this->container['abort_status'] = isset($data['abort_status']) ? $data['abort_status'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['end_timestamp'] = isset($data['end_timestamp']) ? $data['end_timestamp'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['migration_uid'] = isset($data['migration_uid']) ? $data['migration_uid'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : null;
        $this->container['source_node'] = isset($data['source_node']) ? $data['source_node'] : null;
        $this->container['start_timestamp'] = isset($data['start_timestamp']) ? $data['start_timestamp'] : null;
        $this->container['target_direct_migration_node_ports'] = isset($data['target_direct_migration_node_ports']) ? $data['target_direct_migration_node_ports'] : null;
        $this->container['target_node'] = isset($data['target_node']) ? $data['target_node'] : null;
        $this->container['target_node_address'] = isset($data['target_node_address']) ? $data['target_node_address'] : null;
        $this->container['target_node_domain_detected'] = isset($data['target_node_domain_detected']) ? $data['target_node_domain_detected'] : null;
        $this->container['target_pod'] = isset($data['target_pod']) ? $data['target_pod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abort_requested
     *
     * @return bool
     */
    public function getAbortRequested()
    {
        return $this->container['abort_requested'];
    }

    /**
     * Sets abort_requested
     *
     * @param bool $abort_requested Indicates that the migration has been requested to abort
     *
     * @return $this
     */
    public function setAbortRequested($abort_requested)
    {
        $this->container['abort_requested'] = $abort_requested;

        return $this;
    }

    /**
     * Gets abort_status
     *
     * @return string
     */
    public function getAbortStatus()
    {
        return $this->container['abort_status'];
    }

    /**
     * Sets abort_status
     *
     * @param string $abort_status Indicates the final status of the live migration abortion
     *
     * @return $this
     */
    public function setAbortStatus($abort_status)
    {
        $this->container['abort_status'] = $abort_status;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed Indicates the migration completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets end_timestamp
     *
     * @return \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time
     */
    public function getEndTimestamp()
    {
        return $this->container['end_timestamp'];
    }

    /**
     * Sets end_timestamp
     *
     * @param \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time $end_timestamp The time the migration action ended
     *
     * @return $this
     */
    public function setEndTimestamp($end_timestamp)
    {
        $this->container['end_timestamp'] = $end_timestamp;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return bool
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param bool $failed Indicates that the migration failed
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets migration_uid
     *
     * @return string
     */
    public function getMigrationUid()
    {
        return $this->container['migration_uid'];
    }

    /**
     * Sets migration_uid
     *
     * @param string $migration_uid The VirtualMachineInstanceMigration object associated with this migration
     *
     * @return $this
     */
    public function setMigrationUid($migration_uid)
    {
        $this->container['migration_uid'] = $migration_uid;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode Lets us know if the vmi is currently running pre or post copy migration
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets source_node
     *
     * @return string
     */
    public function getSourceNode()
    {
        return $this->container['source_node'];
    }

    /**
     * Sets source_node
     *
     * @param string $source_node The source node that the VMI originated on
     *
     * @return $this
     */
    public function setSourceNode($source_node)
    {
        $this->container['source_node'] = $source_node;

        return $this;
    }

    /**
     * Gets start_timestamp
     *
     * @return \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time
     */
    public function getStartTimestamp()
    {
        return $this->container['start_timestamp'];
    }

    /**
     * Sets start_timestamp
     *
     * @param \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time $start_timestamp The time the migration action began
     *
     * @return $this
     */
    public function setStartTimestamp($start_timestamp)
    {
        $this->container['start_timestamp'] = $start_timestamp;

        return $this;
    }

    /**
     * Gets target_direct_migration_node_ports
     *
     * @return map[string,int]
     */
    public function getTargetDirectMigrationNodePorts()
    {
        return $this->container['target_direct_migration_node_ports'];
    }

    /**
     * Sets target_direct_migration_node_ports
     *
     * @param map[string,int] $target_direct_migration_node_ports The list of ports opened for live migration on the destination node
     *
     * @return $this
     */
    public function setTargetDirectMigrationNodePorts($target_direct_migration_node_ports)
    {
        $this->container['target_direct_migration_node_ports'] = $target_direct_migration_node_ports;

        return $this;
    }

    /**
     * Gets target_node
     *
     * @return string
     */
    public function getTargetNode()
    {
        return $this->container['target_node'];
    }

    /**
     * Sets target_node
     *
     * @param string $target_node The target node that the VMI is moving to
     *
     * @return $this
     */
    public function setTargetNode($target_node)
    {
        $this->container['target_node'] = $target_node;

        return $this;
    }

    /**
     * Gets target_node_address
     *
     * @return string
     */
    public function getTargetNodeAddress()
    {
        return $this->container['target_node_address'];
    }

    /**
     * Sets target_node_address
     *
     * @param string $target_node_address The address of the target node to use for the migration
     *
     * @return $this
     */
    public function setTargetNodeAddress($target_node_address)
    {
        $this->container['target_node_address'] = $target_node_address;

        return $this;
    }

    /**
     * Gets target_node_domain_detected
     *
     * @return bool
     */
    public function getTargetNodeDomainDetected()
    {
        return $this->container['target_node_domain_detected'];
    }

    /**
     * Sets target_node_domain_detected
     *
     * @param bool $target_node_domain_detected The Target Node has seen the Domain Start Event
     *
     * @return $this
     */
    public function setTargetNodeDomainDetected($target_node_domain_detected)
    {
        $this->container['target_node_domain_detected'] = $target_node_domain_detected;

        return $this;
    }

    /**
     * Gets target_pod
     *
     * @return string
     */
    public function getTargetPod()
    {
        return $this->container['target_pod'];
    }

    /**
     * Sets target_pod
     *
     * @param string $target_pod The target pod that the VMI is moving to
     *
     * @return $this
     */
    public function setTargetPod($target_pod)
    {
        $this->container['target_pod'] = $target_pod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


