<?php
/**
 * V1alpha1VirtualMachineRestoreStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1alpha1VirtualMachineRestoreStatus Class Doc Comment
 *
 * @category Class
 * @description VirtualMachineRestoreStatus is the spec for a VirtualMachineRestoreresource
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1alpha1VirtualMachineRestoreStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1alpha1.VirtualMachineRestoreStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'complete' => 'bool',
        'conditions' => '\Swagger\Client\Model\V1alpha1Condition[]',
        'deleted_data_volumes' => 'string[]',
        'restore_time' => '\Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time',
        'restores' => '\Swagger\Client\Model\V1alpha1VolumeRestore[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'complete' => null,
        'conditions' => null,
        'deleted_data_volumes' => null,
        'restore_time' => null,
        'restores' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'complete' => 'complete',
        'conditions' => 'conditions',
        'deleted_data_volumes' => 'deletedDataVolumes',
        'restore_time' => 'restoreTime',
        'restores' => 'restores'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'complete' => 'setComplete',
        'conditions' => 'setConditions',
        'deleted_data_volumes' => 'setDeletedDataVolumes',
        'restore_time' => 'setRestoreTime',
        'restores' => 'setRestores'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'complete' => 'getComplete',
        'conditions' => 'getConditions',
        'deleted_data_volumes' => 'getDeletedDataVolumes',
        'restore_time' => 'getRestoreTime',
        'restores' => 'getRestores'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['deleted_data_volumes'] = isset($data['deleted_data_volumes']) ? $data['deleted_data_volumes'] : null;
        $this->container['restore_time'] = isset($data['restore_time']) ? $data['restore_time'] : null;
        $this->container['restores'] = isset($data['restores']) ? $data['restores'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets complete
     *
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool $complete complete
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Swagger\Client\Model\V1alpha1Condition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Swagger\Client\Model\V1alpha1Condition[] $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets deleted_data_volumes
     *
     * @return string[]
     */
    public function getDeletedDataVolumes()
    {
        return $this->container['deleted_data_volumes'];
    }

    /**
     * Sets deleted_data_volumes
     *
     * @param string[] $deleted_data_volumes deleted_data_volumes
     *
     * @return $this
     */
    public function setDeletedDataVolumes($deleted_data_volumes)
    {
        $this->container['deleted_data_volumes'] = $deleted_data_volumes;

        return $this;
    }

    /**
     * Gets restore_time
     *
     * @return \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time
     */
    public function getRestoreTime()
    {
        return $this->container['restore_time'];
    }

    /**
     * Sets restore_time
     *
     * @param \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time $restore_time restore_time
     *
     * @return $this
     */
    public function setRestoreTime($restore_time)
    {
        $this->container['restore_time'] = $restore_time;

        return $this;
    }

    /**
     * Gets restores
     *
     * @return \Swagger\Client\Model\V1alpha1VolumeRestore[]
     */
    public function getRestores()
    {
        return $this->container['restores'];
    }

    /**
     * Sets restores
     *
     * @param \Swagger\Client\Model\V1alpha1VolumeRestore[] $restores restores
     *
     * @return $this
     */
    public function setRestores($restores)
    {
        $this->container['restores'] = $restores;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


