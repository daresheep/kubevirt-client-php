<?php
/**
 * V1Features
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1Features Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Features implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Features';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acpi' => '\Swagger\Client\Model\V1FeatureState',
        'apic' => '\Swagger\Client\Model\V1FeatureAPIC',
        'hyperv' => '\Swagger\Client\Model\V1FeatureHyperv',
        'kvm' => '\Swagger\Client\Model\V1FeatureKVM',
        'pvspinlock' => '\Swagger\Client\Model\V1FeatureState',
        'smm' => '\Swagger\Client\Model\V1FeatureState'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acpi' => null,
        'apic' => null,
        'hyperv' => null,
        'kvm' => null,
        'pvspinlock' => null,
        'smm' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acpi' => 'acpi',
        'apic' => 'apic',
        'hyperv' => 'hyperv',
        'kvm' => 'kvm',
        'pvspinlock' => 'pvspinlock',
        'smm' => 'smm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acpi' => 'setAcpi',
        'apic' => 'setApic',
        'hyperv' => 'setHyperv',
        'kvm' => 'setKvm',
        'pvspinlock' => 'setPvspinlock',
        'smm' => 'setSmm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acpi' => 'getAcpi',
        'apic' => 'getApic',
        'hyperv' => 'getHyperv',
        'kvm' => 'getKvm',
        'pvspinlock' => 'getPvspinlock',
        'smm' => 'getSmm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acpi'] = isset($data['acpi']) ? $data['acpi'] : null;
        $this->container['apic'] = isset($data['apic']) ? $data['apic'] : null;
        $this->container['hyperv'] = isset($data['hyperv']) ? $data['hyperv'] : null;
        $this->container['kvm'] = isset($data['kvm']) ? $data['kvm'] : null;
        $this->container['pvspinlock'] = isset($data['pvspinlock']) ? $data['pvspinlock'] : null;
        $this->container['smm'] = isset($data['smm']) ? $data['smm'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acpi
     *
     * @return \Swagger\Client\Model\V1FeatureState
     */
    public function getAcpi()
    {
        return $this->container['acpi'];
    }

    /**
     * Sets acpi
     *
     * @param \Swagger\Client\Model\V1FeatureState $acpi ACPI enables/disables ACPI inside the guest. Defaults to enabled.
     *
     * @return $this
     */
    public function setAcpi($acpi)
    {
        $this->container['acpi'] = $acpi;

        return $this;
    }

    /**
     * Gets apic
     *
     * @return \Swagger\Client\Model\V1FeatureAPIC
     */
    public function getApic()
    {
        return $this->container['apic'];
    }

    /**
     * Sets apic
     *
     * @param \Swagger\Client\Model\V1FeatureAPIC $apic Defaults to the machine type setting.
     *
     * @return $this
     */
    public function setApic($apic)
    {
        $this->container['apic'] = $apic;

        return $this;
    }

    /**
     * Gets hyperv
     *
     * @return \Swagger\Client\Model\V1FeatureHyperv
     */
    public function getHyperv()
    {
        return $this->container['hyperv'];
    }

    /**
     * Sets hyperv
     *
     * @param \Swagger\Client\Model\V1FeatureHyperv $hyperv Defaults to the machine type setting.
     *
     * @return $this
     */
    public function setHyperv($hyperv)
    {
        $this->container['hyperv'] = $hyperv;

        return $this;
    }

    /**
     * Gets kvm
     *
     * @return \Swagger\Client\Model\V1FeatureKVM
     */
    public function getKvm()
    {
        return $this->container['kvm'];
    }

    /**
     * Sets kvm
     *
     * @param \Swagger\Client\Model\V1FeatureKVM $kvm Configure how KVM presence is exposed to the guest.
     *
     * @return $this
     */
    public function setKvm($kvm)
    {
        $this->container['kvm'] = $kvm;

        return $this;
    }

    /**
     * Gets pvspinlock
     *
     * @return \Swagger\Client\Model\V1FeatureState
     */
    public function getPvspinlock()
    {
        return $this->container['pvspinlock'];
    }

    /**
     * Sets pvspinlock
     *
     * @param \Swagger\Client\Model\V1FeatureState $pvspinlock Notify the guest that the host supports paravirtual spinlocks. For older kernels this feature should be explicitly disabled.
     *
     * @return $this
     */
    public function setPvspinlock($pvspinlock)
    {
        $this->container['pvspinlock'] = $pvspinlock;

        return $this;
    }

    /**
     * Gets smm
     *
     * @return \Swagger\Client\Model\V1FeatureState
     */
    public function getSmm()
    {
        return $this->container['smm'];
    }

    /**
     * Sets smm
     *
     * @param \Swagger\Client\Model\V1FeatureState $smm SMM enables/disables System Management Mode. TSEG not yet implemented.
     *
     * @return $this
     */
    public function setSmm($smm)
    {
        $this->container['smm'] = $smm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


