<?php
/**
 * V1DHCPOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1DHCPOptions Class Doc Comment
 *
 * @category Class
 * @description Extra DHCP options to use in the interface.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1DHCPOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.DHCPOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boot_file_name' => 'string',
        'ntp_servers' => 'string[]',
        'private_options' => '\Swagger\Client\Model\V1DHCPPrivateOptions[]',
        'tftp_server_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'boot_file_name' => null,
        'ntp_servers' => null,
        'private_options' => null,
        'tftp_server_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'boot_file_name' => 'bootFileName',
        'ntp_servers' => 'ntpServers',
        'private_options' => 'privateOptions',
        'tftp_server_name' => 'tftpServerName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'boot_file_name' => 'setBootFileName',
        'ntp_servers' => 'setNtpServers',
        'private_options' => 'setPrivateOptions',
        'tftp_server_name' => 'setTftpServerName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'boot_file_name' => 'getBootFileName',
        'ntp_servers' => 'getNtpServers',
        'private_options' => 'getPrivateOptions',
        'tftp_server_name' => 'getTftpServerName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boot_file_name'] = isset($data['boot_file_name']) ? $data['boot_file_name'] : null;
        $this->container['ntp_servers'] = isset($data['ntp_servers']) ? $data['ntp_servers'] : null;
        $this->container['private_options'] = isset($data['private_options']) ? $data['private_options'] : null;
        $this->container['tftp_server_name'] = isset($data['tftp_server_name']) ? $data['tftp_server_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets boot_file_name
     *
     * @return string
     */
    public function getBootFileName()
    {
        return $this->container['boot_file_name'];
    }

    /**
     * Sets boot_file_name
     *
     * @param string $boot_file_name If specified will pass option 67 to interface's DHCP server
     *
     * @return $this
     */
    public function setBootFileName($boot_file_name)
    {
        $this->container['boot_file_name'] = $boot_file_name;

        return $this;
    }

    /**
     * Gets ntp_servers
     *
     * @return string[]
     */
    public function getNtpServers()
    {
        return $this->container['ntp_servers'];
    }

    /**
     * Sets ntp_servers
     *
     * @param string[] $ntp_servers If specified will pass the configured NTP server to the VM via DHCP option 042.
     *
     * @return $this
     */
    public function setNtpServers($ntp_servers)
    {
        $this->container['ntp_servers'] = $ntp_servers;

        return $this;
    }

    /**
     * Gets private_options
     *
     * @return \Swagger\Client\Model\V1DHCPPrivateOptions[]
     */
    public function getPrivateOptions()
    {
        return $this->container['private_options'];
    }

    /**
     * Sets private_options
     *
     * @param \Swagger\Client\Model\V1DHCPPrivateOptions[] $private_options If specified will pass extra DHCP options for private use, range: 224-254
     *
     * @return $this
     */
    public function setPrivateOptions($private_options)
    {
        $this->container['private_options'] = $private_options;

        return $this;
    }

    /**
     * Gets tftp_server_name
     *
     * @return string
     */
    public function getTftpServerName()
    {
        return $this->container['tftp_server_name'];
    }

    /**
     * Sets tftp_server_name
     *
     * @param string $tftp_server_name If specified will pass option 66 to interface's DHCP server
     *
     * @return $this
     */
    public function setTftpServerName($tftp_server_name)
    {
        $this->container['tftp_server_name'] = $tftp_server_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


