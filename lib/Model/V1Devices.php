<?php
/**
 * V1Devices
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1Devices Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Devices implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Devices';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'autoattach_graphics_device' => 'bool',
        'autoattach_mem_balloon' => 'bool',
        'autoattach_pod_interface' => 'bool',
        'autoattach_serial_console' => 'bool',
        'block_multi_queue' => 'bool',
        'disable_hotplug' => 'bool',
        'disks' => '\Swagger\Client\Model\V1Disk[]',
        'filesystems' => '\Swagger\Client\Model\V1Filesystem[]',
        'gpus' => '\Swagger\Client\Model\V1GPU[]',
        'host_devices' => '\Swagger\Client\Model\V1HostDevice[]',
        'inputs' => '\Swagger\Client\Model\V1Input[]',
        'interfaces' => '\Swagger\Client\Model\V1Interface[]',
        'network_interface_multiqueue' => 'bool',
        'rng' => '\Swagger\Client\Model\V1Rng',
        'use_virtio_transitional' => 'bool',
        'watchdog' => '\Swagger\Client\Model\V1Watchdog'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'autoattach_graphics_device' => null,
        'autoattach_mem_balloon' => null,
        'autoattach_pod_interface' => null,
        'autoattach_serial_console' => null,
        'block_multi_queue' => null,
        'disable_hotplug' => null,
        'disks' => null,
        'filesystems' => null,
        'gpus' => null,
        'host_devices' => null,
        'inputs' => null,
        'interfaces' => null,
        'network_interface_multiqueue' => null,
        'rng' => null,
        'use_virtio_transitional' => null,
        'watchdog' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autoattach_graphics_device' => 'autoattachGraphicsDevice',
        'autoattach_mem_balloon' => 'autoattachMemBalloon',
        'autoattach_pod_interface' => 'autoattachPodInterface',
        'autoattach_serial_console' => 'autoattachSerialConsole',
        'block_multi_queue' => 'blockMultiQueue',
        'disable_hotplug' => 'disableHotplug',
        'disks' => 'disks',
        'filesystems' => 'filesystems',
        'gpus' => 'gpus',
        'host_devices' => 'hostDevices',
        'inputs' => 'inputs',
        'interfaces' => 'interfaces',
        'network_interface_multiqueue' => 'networkInterfaceMultiqueue',
        'rng' => 'rng',
        'use_virtio_transitional' => 'useVirtioTransitional',
        'watchdog' => 'watchdog'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autoattach_graphics_device' => 'setAutoattachGraphicsDevice',
        'autoattach_mem_balloon' => 'setAutoattachMemBalloon',
        'autoattach_pod_interface' => 'setAutoattachPodInterface',
        'autoattach_serial_console' => 'setAutoattachSerialConsole',
        'block_multi_queue' => 'setBlockMultiQueue',
        'disable_hotplug' => 'setDisableHotplug',
        'disks' => 'setDisks',
        'filesystems' => 'setFilesystems',
        'gpus' => 'setGpus',
        'host_devices' => 'setHostDevices',
        'inputs' => 'setInputs',
        'interfaces' => 'setInterfaces',
        'network_interface_multiqueue' => 'setNetworkInterfaceMultiqueue',
        'rng' => 'setRng',
        'use_virtio_transitional' => 'setUseVirtioTransitional',
        'watchdog' => 'setWatchdog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autoattach_graphics_device' => 'getAutoattachGraphicsDevice',
        'autoattach_mem_balloon' => 'getAutoattachMemBalloon',
        'autoattach_pod_interface' => 'getAutoattachPodInterface',
        'autoattach_serial_console' => 'getAutoattachSerialConsole',
        'block_multi_queue' => 'getBlockMultiQueue',
        'disable_hotplug' => 'getDisableHotplug',
        'disks' => 'getDisks',
        'filesystems' => 'getFilesystems',
        'gpus' => 'getGpus',
        'host_devices' => 'getHostDevices',
        'inputs' => 'getInputs',
        'interfaces' => 'getInterfaces',
        'network_interface_multiqueue' => 'getNetworkInterfaceMultiqueue',
        'rng' => 'getRng',
        'use_virtio_transitional' => 'getUseVirtioTransitional',
        'watchdog' => 'getWatchdog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['autoattach_graphics_device'] = isset($data['autoattach_graphics_device']) ? $data['autoattach_graphics_device'] : null;
        $this->container['autoattach_mem_balloon'] = isset($data['autoattach_mem_balloon']) ? $data['autoattach_mem_balloon'] : null;
        $this->container['autoattach_pod_interface'] = isset($data['autoattach_pod_interface']) ? $data['autoattach_pod_interface'] : null;
        $this->container['autoattach_serial_console'] = isset($data['autoattach_serial_console']) ? $data['autoattach_serial_console'] : null;
        $this->container['block_multi_queue'] = isset($data['block_multi_queue']) ? $data['block_multi_queue'] : null;
        $this->container['disable_hotplug'] = isset($data['disable_hotplug']) ? $data['disable_hotplug'] : null;
        $this->container['disks'] = isset($data['disks']) ? $data['disks'] : null;
        $this->container['filesystems'] = isset($data['filesystems']) ? $data['filesystems'] : null;
        $this->container['gpus'] = isset($data['gpus']) ? $data['gpus'] : null;
        $this->container['host_devices'] = isset($data['host_devices']) ? $data['host_devices'] : null;
        $this->container['inputs'] = isset($data['inputs']) ? $data['inputs'] : null;
        $this->container['interfaces'] = isset($data['interfaces']) ? $data['interfaces'] : null;
        $this->container['network_interface_multiqueue'] = isset($data['network_interface_multiqueue']) ? $data['network_interface_multiqueue'] : null;
        $this->container['rng'] = isset($data['rng']) ? $data['rng'] : null;
        $this->container['use_virtio_transitional'] = isset($data['use_virtio_transitional']) ? $data['use_virtio_transitional'] : null;
        $this->container['watchdog'] = isset($data['watchdog']) ? $data['watchdog'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autoattach_graphics_device
     *
     * @return bool
     */
    public function getAutoattachGraphicsDevice()
    {
        return $this->container['autoattach_graphics_device'];
    }

    /**
     * Sets autoattach_graphics_device
     *
     * @param bool $autoattach_graphics_device Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.
     *
     * @return $this
     */
    public function setAutoattachGraphicsDevice($autoattach_graphics_device)
    {
        $this->container['autoattach_graphics_device'] = $autoattach_graphics_device;

        return $this;
    }

    /**
     * Gets autoattach_mem_balloon
     *
     * @return bool
     */
    public function getAutoattachMemBalloon()
    {
        return $this->container['autoattach_mem_balloon'];
    }

    /**
     * Sets autoattach_mem_balloon
     *
     * @param bool $autoattach_mem_balloon Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.
     *
     * @return $this
     */
    public function setAutoattachMemBalloon($autoattach_mem_balloon)
    {
        $this->container['autoattach_mem_balloon'] = $autoattach_mem_balloon;

        return $this;
    }

    /**
     * Gets autoattach_pod_interface
     *
     * @return bool
     */
    public function getAutoattachPodInterface()
    {
        return $this->container['autoattach_pod_interface'];
    }

    /**
     * Sets autoattach_pod_interface
     *
     * @param bool $autoattach_pod_interface Whether to attach a pod network interface. Defaults to true.
     *
     * @return $this
     */
    public function setAutoattachPodInterface($autoattach_pod_interface)
    {
        $this->container['autoattach_pod_interface'] = $autoattach_pod_interface;

        return $this;
    }

    /**
     * Gets autoattach_serial_console
     *
     * @return bool
     */
    public function getAutoattachSerialConsole()
    {
        return $this->container['autoattach_serial_console'];
    }

    /**
     * Sets autoattach_serial_console
     *
     * @param bool $autoattach_serial_console Whether to attach the default serial console or not. Serial console access will not be available if set to false. Defaults to true.
     *
     * @return $this
     */
    public function setAutoattachSerialConsole($autoattach_serial_console)
    {
        $this->container['autoattach_serial_console'] = $autoattach_serial_console;

        return $this;
    }

    /**
     * Gets block_multi_queue
     *
     * @return bool
     */
    public function getBlockMultiQueue()
    {
        return $this->container['block_multi_queue'];
    }

    /**
     * Sets block_multi_queue
     *
     * @param bool $block_multi_queue Whether or not to enable virtio multi-queue for block devices. Defaults to false.
     *
     * @return $this
     */
    public function setBlockMultiQueue($block_multi_queue)
    {
        $this->container['block_multi_queue'] = $block_multi_queue;

        return $this;
    }

    /**
     * Gets disable_hotplug
     *
     * @return bool
     */
    public function getDisableHotplug()
    {
        return $this->container['disable_hotplug'];
    }

    /**
     * Sets disable_hotplug
     *
     * @param bool $disable_hotplug DisableHotplug disabled the ability to hotplug disks.
     *
     * @return $this
     */
    public function setDisableHotplug($disable_hotplug)
    {
        $this->container['disable_hotplug'] = $disable_hotplug;

        return $this;
    }

    /**
     * Gets disks
     *
     * @return \Swagger\Client\Model\V1Disk[]
     */
    public function getDisks()
    {
        return $this->container['disks'];
    }

    /**
     * Sets disks
     *
     * @param \Swagger\Client\Model\V1Disk[] $disks Disks describes disks, cdroms, floppy and luns which are connected to the vmi.
     *
     * @return $this
     */
    public function setDisks($disks)
    {
        $this->container['disks'] = $disks;

        return $this;
    }

    /**
     * Gets filesystems
     *
     * @return \Swagger\Client\Model\V1Filesystem[]
     */
    public function getFilesystems()
    {
        return $this->container['filesystems'];
    }

    /**
     * Sets filesystems
     *
     * @param \Swagger\Client\Model\V1Filesystem[] $filesystems Filesystems describes filesystem which is connected to the vmi.
     *
     * @return $this
     */
    public function setFilesystems($filesystems)
    {
        $this->container['filesystems'] = $filesystems;

        return $this;
    }

    /**
     * Gets gpus
     *
     * @return \Swagger\Client\Model\V1GPU[]
     */
    public function getGpus()
    {
        return $this->container['gpus'];
    }

    /**
     * Sets gpus
     *
     * @param \Swagger\Client\Model\V1GPU[] $gpus Whether to attach a GPU device to the vmi.
     *
     * @return $this
     */
    public function setGpus($gpus)
    {
        $this->container['gpus'] = $gpus;

        return $this;
    }

    /**
     * Gets host_devices
     *
     * @return \Swagger\Client\Model\V1HostDevice[]
     */
    public function getHostDevices()
    {
        return $this->container['host_devices'];
    }

    /**
     * Sets host_devices
     *
     * @param \Swagger\Client\Model\V1HostDevice[] $host_devices Whether to attach a host device to the vmi.
     *
     * @return $this
     */
    public function setHostDevices($host_devices)
    {
        $this->container['host_devices'] = $host_devices;

        return $this;
    }

    /**
     * Gets inputs
     *
     * @return \Swagger\Client\Model\V1Input[]
     */
    public function getInputs()
    {
        return $this->container['inputs'];
    }

    /**
     * Sets inputs
     *
     * @param \Swagger\Client\Model\V1Input[] $inputs Inputs describe input devices
     *
     * @return $this
     */
    public function setInputs($inputs)
    {
        $this->container['inputs'] = $inputs;

        return $this;
    }

    /**
     * Gets interfaces
     *
     * @return \Swagger\Client\Model\V1Interface[]
     */
    public function getInterfaces()
    {
        return $this->container['interfaces'];
    }

    /**
     * Sets interfaces
     *
     * @param \Swagger\Client\Model\V1Interface[] $interfaces Interfaces describe network interfaces which are added to the vmi.
     *
     * @return $this
     */
    public function setInterfaces($interfaces)
    {
        $this->container['interfaces'] = $interfaces;

        return $this;
    }

    /**
     * Gets network_interface_multiqueue
     *
     * @return bool
     */
    public function getNetworkInterfaceMultiqueue()
    {
        return $this->container['network_interface_multiqueue'];
    }

    /**
     * Sets network_interface_multiqueue
     *
     * @param bool $network_interface_multiqueue If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
     *
     * @return $this
     */
    public function setNetworkInterfaceMultiqueue($network_interface_multiqueue)
    {
        $this->container['network_interface_multiqueue'] = $network_interface_multiqueue;

        return $this;
    }

    /**
     * Gets rng
     *
     * @return \Swagger\Client\Model\V1Rng
     */
    public function getRng()
    {
        return $this->container['rng'];
    }

    /**
     * Sets rng
     *
     * @param \Swagger\Client\Model\V1Rng $rng Whether to have random number generator from host
     *
     * @return $this
     */
    public function setRng($rng)
    {
        $this->container['rng'] = $rng;

        return $this;
    }

    /**
     * Gets use_virtio_transitional
     *
     * @return bool
     */
    public function getUseVirtioTransitional()
    {
        return $this->container['use_virtio_transitional'];
    }

    /**
     * Sets use_virtio_transitional
     *
     * @param bool $use_virtio_transitional Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).
     *
     * @return $this
     */
    public function setUseVirtioTransitional($use_virtio_transitional)
    {
        $this->container['use_virtio_transitional'] = $use_virtio_transitional;

        return $this;
    }

    /**
     * Gets watchdog
     *
     * @return \Swagger\Client\Model\V1Watchdog
     */
    public function getWatchdog()
    {
        return $this->container['watchdog'];
    }

    /**
     * Sets watchdog
     *
     * @param \Swagger\Client\Model\V1Watchdog $watchdog Watchdog describes a watchdog device which can be added to the vmi.
     *
     * @return $this
     */
    public function setWatchdog($watchdog)
    {
        $this->container['watchdog'] = $watchdog;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


