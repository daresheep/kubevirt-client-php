<?php
/**
 * V1Disk
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1Disk Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Disk implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.Disk';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'boot_order' => 'int',
        'cache' => 'string',
        'cdrom' => '\Swagger\Client\Model\V1CDRomTarget',
        'dedicated_io_thread' => 'bool',
        'disk' => '\Swagger\Client\Model\V1DiskTarget',
        'floppy' => '\Swagger\Client\Model\V1FloppyTarget',
        'io' => 'string',
        'lun' => '\Swagger\Client\Model\V1LunTarget',
        'name' => 'string',
        'serial' => 'string',
        'tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'boot_order' => 'int32',
        'cache' => null,
        'cdrom' => null,
        'dedicated_io_thread' => null,
        'disk' => null,
        'floppy' => null,
        'io' => null,
        'lun' => null,
        'name' => null,
        'serial' => null,
        'tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'boot_order' => 'bootOrder',
        'cache' => 'cache',
        'cdrom' => 'cdrom',
        'dedicated_io_thread' => 'dedicatedIOThread',
        'disk' => 'disk',
        'floppy' => 'floppy',
        'io' => 'io',
        'lun' => 'lun',
        'name' => 'name',
        'serial' => 'serial',
        'tag' => 'tag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'boot_order' => 'setBootOrder',
        'cache' => 'setCache',
        'cdrom' => 'setCdrom',
        'dedicated_io_thread' => 'setDedicatedIoThread',
        'disk' => 'setDisk',
        'floppy' => 'setFloppy',
        'io' => 'setIo',
        'lun' => 'setLun',
        'name' => 'setName',
        'serial' => 'setSerial',
        'tag' => 'setTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'boot_order' => 'getBootOrder',
        'cache' => 'getCache',
        'cdrom' => 'getCdrom',
        'dedicated_io_thread' => 'getDedicatedIoThread',
        'disk' => 'getDisk',
        'floppy' => 'getFloppy',
        'io' => 'getIo',
        'lun' => 'getLun',
        'name' => 'getName',
        'serial' => 'getSerial',
        'tag' => 'getTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['boot_order'] = isset($data['boot_order']) ? $data['boot_order'] : null;
        $this->container['cache'] = isset($data['cache']) ? $data['cache'] : null;
        $this->container['cdrom'] = isset($data['cdrom']) ? $data['cdrom'] : null;
        $this->container['dedicated_io_thread'] = isset($data['dedicated_io_thread']) ? $data['dedicated_io_thread'] : null;
        $this->container['disk'] = isset($data['disk']) ? $data['disk'] : null;
        $this->container['floppy'] = isset($data['floppy']) ? $data['floppy'] : null;
        $this->container['io'] = isset($data['io']) ? $data['io'] : null;
        $this->container['lun'] = isset($data['lun']) ? $data['lun'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['serial'] = isset($data['serial']) ? $data['serial'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets boot_order
     *
     * @return int
     */
    public function getBootOrder()
    {
        return $this->container['boot_order'];
    }

    /**
     * Sets boot_order
     *
     * @param int $boot_order BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
     *
     * @return $this
     */
    public function setBootOrder($boot_order)
    {
        $this->container['boot_order'] = $boot_order;

        return $this;
    }

    /**
     * Gets cache
     *
     * @return string
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param string $cache Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
     *
     * @return $this
     */
    public function setCache($cache)
    {
        $this->container['cache'] = $cache;

        return $this;
    }

    /**
     * Gets cdrom
     *
     * @return \Swagger\Client\Model\V1CDRomTarget
     */
    public function getCdrom()
    {
        return $this->container['cdrom'];
    }

    /**
     * Sets cdrom
     *
     * @param \Swagger\Client\Model\V1CDRomTarget $cdrom Attach a volume as a cdrom to the vmi.
     *
     * @return $this
     */
    public function setCdrom($cdrom)
    {
        $this->container['cdrom'] = $cdrom;

        return $this;
    }

    /**
     * Gets dedicated_io_thread
     *
     * @return bool
     */
    public function getDedicatedIoThread()
    {
        return $this->container['dedicated_io_thread'];
    }

    /**
     * Sets dedicated_io_thread
     *
     * @param bool $dedicated_io_thread dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
     *
     * @return $this
     */
    public function setDedicatedIoThread($dedicated_io_thread)
    {
        $this->container['dedicated_io_thread'] = $dedicated_io_thread;

        return $this;
    }

    /**
     * Gets disk
     *
     * @return \Swagger\Client\Model\V1DiskTarget
     */
    public function getDisk()
    {
        return $this->container['disk'];
    }

    /**
     * Sets disk
     *
     * @param \Swagger\Client\Model\V1DiskTarget $disk Attach a volume as a disk to the vmi.
     *
     * @return $this
     */
    public function setDisk($disk)
    {
        $this->container['disk'] = $disk;

        return $this;
    }

    /**
     * Gets floppy
     *
     * @return \Swagger\Client\Model\V1FloppyTarget
     */
    public function getFloppy()
    {
        return $this->container['floppy'];
    }

    /**
     * Sets floppy
     *
     * @param \Swagger\Client\Model\V1FloppyTarget $floppy Attach a volume as a floppy to the vmi.
     *
     * @return $this
     */
    public function setFloppy($floppy)
    {
        $this->container['floppy'] = $floppy;

        return $this;
    }

    /**
     * Gets io
     *
     * @return string
     */
    public function getIo()
    {
        return $this->container['io'];
    }

    /**
     * Sets io
     *
     * @param string $io IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
     *
     * @return $this
     */
    public function setIo($io)
    {
        $this->container['io'] = $io;

        return $this;
    }

    /**
     * Gets lun
     *
     * @return \Swagger\Client\Model\V1LunTarget
     */
    public function getLun()
    {
        return $this->container['lun'];
    }

    /**
     * Sets lun
     *
     * @param \Swagger\Client\Model\V1LunTarget $lun Attach a volume as a LUN to the vmi.
     *
     * @return $this
     */
    public function setLun($lun)
    {
        $this->container['lun'] = $lun;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name is the device name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string $serial Serial provides the ability to specify a serial number for the disk device.
     *
     * @return $this
     */
    public function setSerial($serial)
    {
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string $tag If specified, disk address and its tag will be provided to the guest via config drive metadata
     *
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


