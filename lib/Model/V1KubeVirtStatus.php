<?php
/**
 * V1KubeVirtStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1KubeVirtStatus Class Doc Comment
 *
 * @category Class
 * @description KubeVirtStatus represents information pertaining to a KubeVirt deployment.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1KubeVirtStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.KubeVirtStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conditions' => '\Swagger\Client\Model\V1KubeVirtCondition[]',
        'generations' => '\Swagger\Client\Model\GithubComOpenshiftApiOperatorV1GenerationStatus[]',
        'observed_deployment_config' => 'string',
        'observed_deployment_id' => 'string',
        'observed_kube_virt_registry' => 'string',
        'observed_kube_virt_version' => 'string',
        'operator_version' => 'string',
        'outdated_virtual_machine_instance_workloads' => 'int',
        'phase' => 'string',
        'target_deployment_config' => 'string',
        'target_deployment_id' => 'string',
        'target_kube_virt_registry' => 'string',
        'target_kube_virt_version' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conditions' => null,
        'generations' => null,
        'observed_deployment_config' => null,
        'observed_deployment_id' => null,
        'observed_kube_virt_registry' => null,
        'observed_kube_virt_version' => null,
        'operator_version' => null,
        'outdated_virtual_machine_instance_workloads' => 'int32',
        'phase' => null,
        'target_deployment_config' => null,
        'target_deployment_id' => null,
        'target_kube_virt_registry' => null,
        'target_kube_virt_version' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conditions' => 'conditions',
        'generations' => 'generations',
        'observed_deployment_config' => 'observedDeploymentConfig',
        'observed_deployment_id' => 'observedDeploymentID',
        'observed_kube_virt_registry' => 'observedKubeVirtRegistry',
        'observed_kube_virt_version' => 'observedKubeVirtVersion',
        'operator_version' => 'operatorVersion',
        'outdated_virtual_machine_instance_workloads' => 'outdatedVirtualMachineInstanceWorkloads',
        'phase' => 'phase',
        'target_deployment_config' => 'targetDeploymentConfig',
        'target_deployment_id' => 'targetDeploymentID',
        'target_kube_virt_registry' => 'targetKubeVirtRegistry',
        'target_kube_virt_version' => 'targetKubeVirtVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conditions' => 'setConditions',
        'generations' => 'setGenerations',
        'observed_deployment_config' => 'setObservedDeploymentConfig',
        'observed_deployment_id' => 'setObservedDeploymentId',
        'observed_kube_virt_registry' => 'setObservedKubeVirtRegistry',
        'observed_kube_virt_version' => 'setObservedKubeVirtVersion',
        'operator_version' => 'setOperatorVersion',
        'outdated_virtual_machine_instance_workloads' => 'setOutdatedVirtualMachineInstanceWorkloads',
        'phase' => 'setPhase',
        'target_deployment_config' => 'setTargetDeploymentConfig',
        'target_deployment_id' => 'setTargetDeploymentId',
        'target_kube_virt_registry' => 'setTargetKubeVirtRegistry',
        'target_kube_virt_version' => 'setTargetKubeVirtVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conditions' => 'getConditions',
        'generations' => 'getGenerations',
        'observed_deployment_config' => 'getObservedDeploymentConfig',
        'observed_deployment_id' => 'getObservedDeploymentId',
        'observed_kube_virt_registry' => 'getObservedKubeVirtRegistry',
        'observed_kube_virt_version' => 'getObservedKubeVirtVersion',
        'operator_version' => 'getOperatorVersion',
        'outdated_virtual_machine_instance_workloads' => 'getOutdatedVirtualMachineInstanceWorkloads',
        'phase' => 'getPhase',
        'target_deployment_config' => 'getTargetDeploymentConfig',
        'target_deployment_id' => 'getTargetDeploymentId',
        'target_kube_virt_registry' => 'getTargetKubeVirtRegistry',
        'target_kube_virt_version' => 'getTargetKubeVirtVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['generations'] = isset($data['generations']) ? $data['generations'] : null;
        $this->container['observed_deployment_config'] = isset($data['observed_deployment_config']) ? $data['observed_deployment_config'] : null;
        $this->container['observed_deployment_id'] = isset($data['observed_deployment_id']) ? $data['observed_deployment_id'] : null;
        $this->container['observed_kube_virt_registry'] = isset($data['observed_kube_virt_registry']) ? $data['observed_kube_virt_registry'] : null;
        $this->container['observed_kube_virt_version'] = isset($data['observed_kube_virt_version']) ? $data['observed_kube_virt_version'] : null;
        $this->container['operator_version'] = isset($data['operator_version']) ? $data['operator_version'] : null;
        $this->container['outdated_virtual_machine_instance_workloads'] = isset($data['outdated_virtual_machine_instance_workloads']) ? $data['outdated_virtual_machine_instance_workloads'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['target_deployment_config'] = isset($data['target_deployment_config']) ? $data['target_deployment_config'] : null;
        $this->container['target_deployment_id'] = isset($data['target_deployment_id']) ? $data['target_deployment_id'] : null;
        $this->container['target_kube_virt_registry'] = isset($data['target_kube_virt_registry']) ? $data['target_kube_virt_registry'] : null;
        $this->container['target_kube_virt_version'] = isset($data['target_kube_virt_version']) ? $data['target_kube_virt_version'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conditions
     *
     * @return \Swagger\Client\Model\V1KubeVirtCondition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Swagger\Client\Model\V1KubeVirtCondition[] $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets generations
     *
     * @return \Swagger\Client\Model\GithubComOpenshiftApiOperatorV1GenerationStatus[]
     */
    public function getGenerations()
    {
        return $this->container['generations'];
    }

    /**
     * Sets generations
     *
     * @param \Swagger\Client\Model\GithubComOpenshiftApiOperatorV1GenerationStatus[] $generations generations
     *
     * @return $this
     */
    public function setGenerations($generations)
    {
        $this->container['generations'] = $generations;

        return $this;
    }

    /**
     * Gets observed_deployment_config
     *
     * @return string
     */
    public function getObservedDeploymentConfig()
    {
        return $this->container['observed_deployment_config'];
    }

    /**
     * Sets observed_deployment_config
     *
     * @param string $observed_deployment_config observed_deployment_config
     *
     * @return $this
     */
    public function setObservedDeploymentConfig($observed_deployment_config)
    {
        $this->container['observed_deployment_config'] = $observed_deployment_config;

        return $this;
    }

    /**
     * Gets observed_deployment_id
     *
     * @return string
     */
    public function getObservedDeploymentId()
    {
        return $this->container['observed_deployment_id'];
    }

    /**
     * Sets observed_deployment_id
     *
     * @param string $observed_deployment_id observed_deployment_id
     *
     * @return $this
     */
    public function setObservedDeploymentId($observed_deployment_id)
    {
        $this->container['observed_deployment_id'] = $observed_deployment_id;

        return $this;
    }

    /**
     * Gets observed_kube_virt_registry
     *
     * @return string
     */
    public function getObservedKubeVirtRegistry()
    {
        return $this->container['observed_kube_virt_registry'];
    }

    /**
     * Sets observed_kube_virt_registry
     *
     * @param string $observed_kube_virt_registry observed_kube_virt_registry
     *
     * @return $this
     */
    public function setObservedKubeVirtRegistry($observed_kube_virt_registry)
    {
        $this->container['observed_kube_virt_registry'] = $observed_kube_virt_registry;

        return $this;
    }

    /**
     * Gets observed_kube_virt_version
     *
     * @return string
     */
    public function getObservedKubeVirtVersion()
    {
        return $this->container['observed_kube_virt_version'];
    }

    /**
     * Sets observed_kube_virt_version
     *
     * @param string $observed_kube_virt_version observed_kube_virt_version
     *
     * @return $this
     */
    public function setObservedKubeVirtVersion($observed_kube_virt_version)
    {
        $this->container['observed_kube_virt_version'] = $observed_kube_virt_version;

        return $this;
    }

    /**
     * Gets operator_version
     *
     * @return string
     */
    public function getOperatorVersion()
    {
        return $this->container['operator_version'];
    }

    /**
     * Sets operator_version
     *
     * @param string $operator_version operator_version
     *
     * @return $this
     */
    public function setOperatorVersion($operator_version)
    {
        $this->container['operator_version'] = $operator_version;

        return $this;
    }

    /**
     * Gets outdated_virtual_machine_instance_workloads
     *
     * @return int
     */
    public function getOutdatedVirtualMachineInstanceWorkloads()
    {
        return $this->container['outdated_virtual_machine_instance_workloads'];
    }

    /**
     * Sets outdated_virtual_machine_instance_workloads
     *
     * @param int $outdated_virtual_machine_instance_workloads outdated_virtual_machine_instance_workloads
     *
     * @return $this
     */
    public function setOutdatedVirtualMachineInstanceWorkloads($outdated_virtual_machine_instance_workloads)
    {
        $this->container['outdated_virtual_machine_instance_workloads'] = $outdated_virtual_machine_instance_workloads;

        return $this;
    }

    /**
     * Gets phase
     *
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string $phase phase
     *
     * @return $this
     */
    public function setPhase($phase)
    {
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets target_deployment_config
     *
     * @return string
     */
    public function getTargetDeploymentConfig()
    {
        return $this->container['target_deployment_config'];
    }

    /**
     * Sets target_deployment_config
     *
     * @param string $target_deployment_config target_deployment_config
     *
     * @return $this
     */
    public function setTargetDeploymentConfig($target_deployment_config)
    {
        $this->container['target_deployment_config'] = $target_deployment_config;

        return $this;
    }

    /**
     * Gets target_deployment_id
     *
     * @return string
     */
    public function getTargetDeploymentId()
    {
        return $this->container['target_deployment_id'];
    }

    /**
     * Sets target_deployment_id
     *
     * @param string $target_deployment_id target_deployment_id
     *
     * @return $this
     */
    public function setTargetDeploymentId($target_deployment_id)
    {
        $this->container['target_deployment_id'] = $target_deployment_id;

        return $this;
    }

    /**
     * Gets target_kube_virt_registry
     *
     * @return string
     */
    public function getTargetKubeVirtRegistry()
    {
        return $this->container['target_kube_virt_registry'];
    }

    /**
     * Sets target_kube_virt_registry
     *
     * @param string $target_kube_virt_registry target_kube_virt_registry
     *
     * @return $this
     */
    public function setTargetKubeVirtRegistry($target_kube_virt_registry)
    {
        $this->container['target_kube_virt_registry'] = $target_kube_virt_registry;

        return $this;
    }

    /**
     * Gets target_kube_virt_version
     *
     * @return string
     */
    public function getTargetKubeVirtVersion()
    {
        return $this->container['target_kube_virt_version'];
    }

    /**
     * Sets target_kube_virt_version
     *
     * @param string $target_kube_virt_version target_kube_virt_version
     *
     * @return $this
     */
    public function setTargetKubeVirtVersion($target_kube_virt_version)
    {
        $this->container['target_kube_virt_version'] = $target_kube_virt_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


