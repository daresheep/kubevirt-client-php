<?php
/**
 * V1VirtualMachineInstanceStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1VirtualMachineInstanceStatus Class Doc Comment
 *
 * @category Class
 * @description VirtualMachineInstanceStatus represents information about the status of a VirtualMachineInstance. Status may trail the actual state of a system.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1VirtualMachineInstanceStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.VirtualMachineInstanceStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active_pods' => 'map[string,string]',
        'conditions' => '\Swagger\Client\Model\V1VirtualMachineInstanceCondition[]',
        'evacuation_node_name' => 'string',
        'guest_os_info' => '\Swagger\Client\Model\V1VirtualMachineInstanceGuestOSInfo',
        'interfaces' => '\Swagger\Client\Model\V1VirtualMachineInstanceNetworkInterface[]',
        'launcher_container_image_version' => 'string',
        'migration_method' => 'string',
        'migration_state' => '\Swagger\Client\Model\V1VirtualMachineInstanceMigrationState',
        'node_name' => 'string',
        'phase' => 'string',
        'qos_class' => 'string',
        'reason' => 'string',
        'volume_status' => '\Swagger\Client\Model\V1VolumeStatus[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active_pods' => null,
        'conditions' => null,
        'evacuation_node_name' => null,
        'guest_os_info' => null,
        'interfaces' => null,
        'launcher_container_image_version' => null,
        'migration_method' => null,
        'migration_state' => null,
        'node_name' => null,
        'phase' => null,
        'qos_class' => null,
        'reason' => null,
        'volume_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_pods' => 'activePods',
        'conditions' => 'conditions',
        'evacuation_node_name' => 'evacuationNodeName',
        'guest_os_info' => 'guestOSInfo',
        'interfaces' => 'interfaces',
        'launcher_container_image_version' => 'launcherContainerImageVersion',
        'migration_method' => 'migrationMethod',
        'migration_state' => 'migrationState',
        'node_name' => 'nodeName',
        'phase' => 'phase',
        'qos_class' => 'qosClass',
        'reason' => 'reason',
        'volume_status' => 'volumeStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_pods' => 'setActivePods',
        'conditions' => 'setConditions',
        'evacuation_node_name' => 'setEvacuationNodeName',
        'guest_os_info' => 'setGuestOsInfo',
        'interfaces' => 'setInterfaces',
        'launcher_container_image_version' => 'setLauncherContainerImageVersion',
        'migration_method' => 'setMigrationMethod',
        'migration_state' => 'setMigrationState',
        'node_name' => 'setNodeName',
        'phase' => 'setPhase',
        'qos_class' => 'setQosClass',
        'reason' => 'setReason',
        'volume_status' => 'setVolumeStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_pods' => 'getActivePods',
        'conditions' => 'getConditions',
        'evacuation_node_name' => 'getEvacuationNodeName',
        'guest_os_info' => 'getGuestOsInfo',
        'interfaces' => 'getInterfaces',
        'launcher_container_image_version' => 'getLauncherContainerImageVersion',
        'migration_method' => 'getMigrationMethod',
        'migration_state' => 'getMigrationState',
        'node_name' => 'getNodeName',
        'phase' => 'getPhase',
        'qos_class' => 'getQosClass',
        'reason' => 'getReason',
        'volume_status' => 'getVolumeStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_pods'] = isset($data['active_pods']) ? $data['active_pods'] : null;
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['evacuation_node_name'] = isset($data['evacuation_node_name']) ? $data['evacuation_node_name'] : null;
        $this->container['guest_os_info'] = isset($data['guest_os_info']) ? $data['guest_os_info'] : null;
        $this->container['interfaces'] = isset($data['interfaces']) ? $data['interfaces'] : null;
        $this->container['launcher_container_image_version'] = isset($data['launcher_container_image_version']) ? $data['launcher_container_image_version'] : null;
        $this->container['migration_method'] = isset($data['migration_method']) ? $data['migration_method'] : null;
        $this->container['migration_state'] = isset($data['migration_state']) ? $data['migration_state'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['qos_class'] = isset($data['qos_class']) ? $data['qos_class'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['volume_status'] = isset($data['volume_status']) ? $data['volume_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_pods
     *
     * @return map[string,string]
     */
    public function getActivePods()
    {
        return $this->container['active_pods'];
    }

    /**
     * Sets active_pods
     *
     * @param map[string,string] $active_pods ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.
     *
     * @return $this
     */
    public function setActivePods($active_pods)
    {
        $this->container['active_pods'] = $active_pods;

        return $this;
    }

    /**
     * Gets conditions
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceCondition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceCondition[] $conditions Conditions are specific points in VirtualMachineInstance's pod runtime.
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets evacuation_node_name
     *
     * @return string
     */
    public function getEvacuationNodeName()
    {
        return $this->container['evacuation_node_name'];
    }

    /**
     * Sets evacuation_node_name
     *
     * @param string $evacuation_node_name EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.
     *
     * @return $this
     */
    public function setEvacuationNodeName($evacuation_node_name)
    {
        $this->container['evacuation_node_name'] = $evacuation_node_name;

        return $this;
    }

    /**
     * Gets guest_os_info
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceGuestOSInfo
     */
    public function getGuestOsInfo()
    {
        return $this->container['guest_os_info'];
    }

    /**
     * Sets guest_os_info
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceGuestOSInfo $guest_os_info Guest OS Information
     *
     * @return $this
     */
    public function setGuestOsInfo($guest_os_info)
    {
        $this->container['guest_os_info'] = $guest_os_info;

        return $this;
    }

    /**
     * Gets interfaces
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceNetworkInterface[]
     */
    public function getInterfaces()
    {
        return $this->container['interfaces'];
    }

    /**
     * Sets interfaces
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceNetworkInterface[] $interfaces Interfaces represent the details of available network interfaces.
     *
     * @return $this
     */
    public function setInterfaces($interfaces)
    {
        $this->container['interfaces'] = $interfaces;

        return $this;
    }

    /**
     * Gets launcher_container_image_version
     *
     * @return string
     */
    public function getLauncherContainerImageVersion()
    {
        return $this->container['launcher_container_image_version'];
    }

    /**
     * Sets launcher_container_image_version
     *
     * @param string $launcher_container_image_version LauncherContainerImageVersion indicates what container image is currently active for the vmi.
     *
     * @return $this
     */
    public function setLauncherContainerImageVersion($launcher_container_image_version)
    {
        $this->container['launcher_container_image_version'] = $launcher_container_image_version;

        return $this;
    }

    /**
     * Gets migration_method
     *
     * @return string
     */
    public function getMigrationMethod()
    {
        return $this->container['migration_method'];
    }

    /**
     * Sets migration_method
     *
     * @param string $migration_method Represents the method using which the vmi can be migrated: live migration or block migration
     *
     * @return $this
     */
    public function setMigrationMethod($migration_method)
    {
        $this->container['migration_method'] = $migration_method;

        return $this;
    }

    /**
     * Gets migration_state
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceMigrationState
     */
    public function getMigrationState()
    {
        return $this->container['migration_state'];
    }

    /**
     * Sets migration_state
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceMigrationState $migration_state Represents the status of a live migration
     *
     * @return $this
     */
    public function setMigrationState($migration_state)
    {
        $this->container['migration_state'] = $migration_state;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name NodeName is the name where the VirtualMachineInstance is currently running.
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets phase
     *
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string $phase Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
     *
     * @return $this
     */
    public function setPhase($phase)
    {
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets qos_class
     *
     * @return string
     */
    public function getQosClass()
    {
        return $this->container['qos_class'];
    }

    /**
     * Sets qos_class
     *
     * @param string $qos_class The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
     *
     * @return $this
     */
    public function setQosClass($qos_class)
    {
        $this->container['qos_class'] = $qos_class;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets volume_status
     *
     * @return \Swagger\Client\Model\V1VolumeStatus[]
     */
    public function getVolumeStatus()
    {
        return $this->container['volume_status'];
    }

    /**
     * Sets volume_status
     *
     * @param \Swagger\Client\Model\V1VolumeStatus[] $volume_status VolumeStatus contains the statuses of all the volumes
     *
     * @return $this
     */
    public function setVolumeStatus($volume_status)
    {
        $this->container['volume_status'] = $volume_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


