<?php
/**
 * V1VirtualMachineInstanceGuestAgentInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1VirtualMachineInstanceGuestAgentInfo Class Doc Comment
 *
 * @category Class
 * @description VirtualMachineInstanceGuestAgentInfo represents information from the installed guest agent
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1VirtualMachineInstanceGuestAgentInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.VirtualMachineInstanceGuestAgentInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'api_version' => 'string',
        'fs_info' => '\Swagger\Client\Model\V1VirtualMachineInstanceFileSystemInfo',
        'guest_agent_version' => 'string',
        'hostname' => 'string',
        'kind' => 'string',
        'os' => '\Swagger\Client\Model\V1VirtualMachineInstanceGuestOSInfo',
        'timezone' => 'string',
        'user_list' => '\Swagger\Client\Model\V1VirtualMachineInstanceGuestOSUser[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'api_version' => null,
        'fs_info' => null,
        'guest_agent_version' => null,
        'hostname' => null,
        'kind' => null,
        'os' => null,
        'timezone' => null,
        'user_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_version' => 'apiVersion',
        'fs_info' => 'fsInfo',
        'guest_agent_version' => 'guestAgentVersion',
        'hostname' => 'hostname',
        'kind' => 'kind',
        'os' => 'os',
        'timezone' => 'timezone',
        'user_list' => 'userList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_version' => 'setApiVersion',
        'fs_info' => 'setFsInfo',
        'guest_agent_version' => 'setGuestAgentVersion',
        'hostname' => 'setHostname',
        'kind' => 'setKind',
        'os' => 'setOs',
        'timezone' => 'setTimezone',
        'user_list' => 'setUserList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_version' => 'getApiVersion',
        'fs_info' => 'getFsInfo',
        'guest_agent_version' => 'getGuestAgentVersion',
        'hostname' => 'getHostname',
        'kind' => 'getKind',
        'os' => 'getOs',
        'timezone' => 'getTimezone',
        'user_list' => 'getUserList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['api_version'] = isset($data['api_version']) ? $data['api_version'] : null;
        $this->container['fs_info'] = isset($data['fs_info']) ? $data['fs_info'] : null;
        $this->container['guest_agent_version'] = isset($data['guest_agent_version']) ? $data['guest_agent_version'] : null;
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['kind'] = isset($data['kind']) ? $data['kind'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['user_list'] = isset($data['user_list']) ? $data['user_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_version
     *
     * @return string
     */
    public function getApiVersion()
    {
        return $this->container['api_version'];
    }

    /**
     * Sets api_version
     *
     * @param string $api_version APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     *
     * @return $this
     */
    public function setApiVersion($api_version)
    {
        $this->container['api_version'] = $api_version;

        return $this;
    }

    /**
     * Gets fs_info
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceFileSystemInfo
     */
    public function getFsInfo()
    {
        return $this->container['fs_info'];
    }

    /**
     * Sets fs_info
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceFileSystemInfo $fs_info FSInfo is a guest os filesystem information containing the disk mapping and disk mounts with usage
     *
     * @return $this
     */
    public function setFsInfo($fs_info)
    {
        $this->container['fs_info'] = $fs_info;

        return $this;
    }

    /**
     * Gets guest_agent_version
     *
     * @return string
     */
    public function getGuestAgentVersion()
    {
        return $this->container['guest_agent_version'];
    }

    /**
     * Sets guest_agent_version
     *
     * @param string $guest_agent_version GAVersion is a version of currently installed guest agent
     *
     * @return $this
     */
    public function setGuestAgentVersion($guest_agent_version)
    {
        $this->container['guest_agent_version'] = $guest_agent_version;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname Hostname represents FQDN of a guest
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return string
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param string $kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     *
     * @return $this
     */
    public function setKind($kind)
    {
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets os
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceGuestOSInfo
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceGuestOSInfo $os OS contains the guest operating system information
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone is guest os current timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets user_list
     *
     * @return \Swagger\Client\Model\V1VirtualMachineInstanceGuestOSUser[]
     */
    public function getUserList()
    {
        return $this->container['user_list'];
    }

    /**
     * Sets user_list
     *
     * @param \Swagger\Client\Model\V1VirtualMachineInstanceGuestOSUser[] $user_list UserList is a list of active guest OS users
     *
     * @return $this
     */
    public function setUserList($user_list)
    {
        $this->container['user_list'] = $user_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


