<?php
/**
 * V1alpha1VirtualMachineSnapshotStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1alpha1VirtualMachineSnapshotStatus Class Doc Comment
 *
 * @category Class
 * @description VirtualMachineSnapshotStatus is the status for a VirtualMachineSnapshot resource
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1alpha1VirtualMachineSnapshotStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1alpha1.VirtualMachineSnapshotStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conditions' => '\Swagger\Client\Model\V1alpha1Condition[]',
        'creation_time' => '\Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time',
        'error' => '\Swagger\Client\Model\V1alpha1Error',
        'ready_to_use' => 'bool',
        'source_uid' => 'string',
        'virtual_machine_snapshot_content_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conditions' => null,
        'creation_time' => null,
        'error' => null,
        'ready_to_use' => null,
        'source_uid' => null,
        'virtual_machine_snapshot_content_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conditions' => 'conditions',
        'creation_time' => 'creationTime',
        'error' => 'error',
        'ready_to_use' => 'readyToUse',
        'source_uid' => 'sourceUID',
        'virtual_machine_snapshot_content_name' => 'virtualMachineSnapshotContentName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conditions' => 'setConditions',
        'creation_time' => 'setCreationTime',
        'error' => 'setError',
        'ready_to_use' => 'setReadyToUse',
        'source_uid' => 'setSourceUid',
        'virtual_machine_snapshot_content_name' => 'setVirtualMachineSnapshotContentName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conditions' => 'getConditions',
        'creation_time' => 'getCreationTime',
        'error' => 'getError',
        'ready_to_use' => 'getReadyToUse',
        'source_uid' => 'getSourceUid',
        'virtual_machine_snapshot_content_name' => 'getVirtualMachineSnapshotContentName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conditions'] = isset($data['conditions']) ? $data['conditions'] : null;
        $this->container['creation_time'] = isset($data['creation_time']) ? $data['creation_time'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['ready_to_use'] = isset($data['ready_to_use']) ? $data['ready_to_use'] : null;
        $this->container['source_uid'] = isset($data['source_uid']) ? $data['source_uid'] : null;
        $this->container['virtual_machine_snapshot_content_name'] = isset($data['virtual_machine_snapshot_content_name']) ? $data['virtual_machine_snapshot_content_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conditions
     *
     * @return \Swagger\Client\Model\V1alpha1Condition[]
     */
    public function getConditions()
    {
        return $this->container['conditions'];
    }

    /**
     * Sets conditions
     *
     * @param \Swagger\Client\Model\V1alpha1Condition[] $conditions conditions
     *
     * @return $this
     */
    public function setConditions($conditions)
    {
        $this->container['conditions'] = $conditions;

        return $this;
    }

    /**
     * Gets creation_time
     *
     * @return \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time
     */
    public function getCreationTime()
    {
        return $this->container['creation_time'];
    }

    /**
     * Sets creation_time
     *
     * @param \Swagger\Client\Model\K8sIoApimachineryPkgApisMetaV1Time $creation_time creation_time
     *
     * @return $this
     */
    public function setCreationTime($creation_time)
    {
        $this->container['creation_time'] = $creation_time;

        return $this;
    }

    /**
     * Gets error
     *
     * @return \Swagger\Client\Model\V1alpha1Error
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \Swagger\Client\Model\V1alpha1Error $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets ready_to_use
     *
     * @return bool
     */
    public function getReadyToUse()
    {
        return $this->container['ready_to_use'];
    }

    /**
     * Sets ready_to_use
     *
     * @param bool $ready_to_use ready_to_use
     *
     * @return $this
     */
    public function setReadyToUse($ready_to_use)
    {
        $this->container['ready_to_use'] = $ready_to_use;

        return $this;
    }

    /**
     * Gets source_uid
     *
     * @return string
     */
    public function getSourceUid()
    {
        return $this->container['source_uid'];
    }

    /**
     * Sets source_uid
     *
     * @param string $source_uid source_uid
     *
     * @return $this
     */
    public function setSourceUid($source_uid)
    {
        $this->container['source_uid'] = $source_uid;

        return $this;
    }

    /**
     * Gets virtual_machine_snapshot_content_name
     *
     * @return string
     */
    public function getVirtualMachineSnapshotContentName()
    {
        return $this->container['virtual_machine_snapshot_content_name'];
    }

    /**
     * Sets virtual_machine_snapshot_content_name
     *
     * @param string $virtual_machine_snapshot_content_name virtual_machine_snapshot_content_name
     *
     * @return $this
     */
    public function setVirtualMachineSnapshotContentName($virtual_machine_snapshot_content_name)
    {
        $this->container['virtual_machine_snapshot_content_name'] = $virtual_machine_snapshot_content_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


