<?php
/**
 * V1CPU
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * KubeVirt API
 *
 * This is KubeVirt API an add-on for Kubernetes.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kubevirt-dev@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * V1CPU Class Doc Comment
 *
 * @category Class
 * @description CPU allows specifying the CPU topology.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1CPU implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v1.CPU';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cores' => 'int',
        'dedicated_cpu_placement' => 'bool',
        'features' => '\Swagger\Client\Model\V1CPUFeature[]',
        'isolate_emulator_thread' => 'bool',
        'model' => 'string',
        'sockets' => 'int',
        'threads' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cores' => 'int64',
        'dedicated_cpu_placement' => null,
        'features' => null,
        'isolate_emulator_thread' => null,
        'model' => null,
        'sockets' => 'int64',
        'threads' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cores' => 'cores',
        'dedicated_cpu_placement' => 'dedicatedCpuPlacement',
        'features' => 'features',
        'isolate_emulator_thread' => 'isolateEmulatorThread',
        'model' => 'model',
        'sockets' => 'sockets',
        'threads' => 'threads'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cores' => 'setCores',
        'dedicated_cpu_placement' => 'setDedicatedCpuPlacement',
        'features' => 'setFeatures',
        'isolate_emulator_thread' => 'setIsolateEmulatorThread',
        'model' => 'setModel',
        'sockets' => 'setSockets',
        'threads' => 'setThreads'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cores' => 'getCores',
        'dedicated_cpu_placement' => 'getDedicatedCpuPlacement',
        'features' => 'getFeatures',
        'isolate_emulator_thread' => 'getIsolateEmulatorThread',
        'model' => 'getModel',
        'sockets' => 'getSockets',
        'threads' => 'getThreads'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cores'] = isset($data['cores']) ? $data['cores'] : null;
        $this->container['dedicated_cpu_placement'] = isset($data['dedicated_cpu_placement']) ? $data['dedicated_cpu_placement'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['isolate_emulator_thread'] = isset($data['isolate_emulator_thread']) ? $data['isolate_emulator_thread'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['sockets'] = isset($data['sockets']) ? $data['sockets'] : null;
        $this->container['threads'] = isset($data['threads']) ? $data['threads'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cores
     *
     * @return int
     */
    public function getCores()
    {
        return $this->container['cores'];
    }

    /**
     * Sets cores
     *
     * @param int $cores Cores specifies the number of cores inside the vmi. Must be a value greater or equal 1.
     *
     * @return $this
     */
    public function setCores($cores)
    {
        $this->container['cores'] = $cores;

        return $this;
    }

    /**
     * Gets dedicated_cpu_placement
     *
     * @return bool
     */
    public function getDedicatedCpuPlacement()
    {
        return $this->container['dedicated_cpu_placement'];
    }

    /**
     * Sets dedicated_cpu_placement
     *
     * @param bool $dedicated_cpu_placement DedicatedCPUPlacement requests the scheduler to place the VirtualMachineInstance on a node with enough dedicated pCPUs and pin the vCPUs to it.
     *
     * @return $this
     */
    public function setDedicatedCpuPlacement($dedicated_cpu_placement)
    {
        $this->container['dedicated_cpu_placement'] = $dedicated_cpu_placement;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \Swagger\Client\Model\V1CPUFeature[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \Swagger\Client\Model\V1CPUFeature[] $features Features specifies the CPU features list inside the VMI.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets isolate_emulator_thread
     *
     * @return bool
     */
    public function getIsolateEmulatorThread()
    {
        return $this->container['isolate_emulator_thread'];
    }

    /**
     * Sets isolate_emulator_thread
     *
     * @param bool $isolate_emulator_thread IsolateEmulatorThread requests one more dedicated pCPU to be allocated for the VMI to place the emulator thread on it.
     *
     * @return $this
     */
    public function setIsolateEmulatorThread($isolate_emulator_thread)
    {
        $this->container['isolate_emulator_thread'] = $isolate_emulator_thread;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Model specifies the CPU model inside the VMI. List of available models https://github.com/libvirt/libvirt/tree/master/src/cpu_map. It is possible to specify special cases like \"host-passthrough\" to get the same CPU as the node and \"host-model\" to get CPU closest to the node one. Defaults to host-model.
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets sockets
     *
     * @return int
     */
    public function getSockets()
    {
        return $this->container['sockets'];
    }

    /**
     * Sets sockets
     *
     * @param int $sockets Sockets specifies the number of sockets inside the vmi. Must be a value greater or equal 1.
     *
     * @return $this
     */
    public function setSockets($sockets)
    {
        $this->container['sockets'] = $sockets;

        return $this;
    }

    /**
     * Gets threads
     *
     * @return int
     */
    public function getThreads()
    {
        return $this->container['threads'];
    }

    /**
     * Sets threads
     *
     * @param int $threads Threads specifies the number of threads inside the vmi. Must be a value greater or equal 1.
     *
     * @return $this
     */
    public function setThreads($threads)
    {
        $this->container['threads'] = $threads;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


